/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/api/v1/auth/register": {
    /**
     * Register
     * @description Register a new user
     *
     * - **username**: Unique username (3-100 characters)
     * - **email**: Valid email address
     * - **password**: Password (min 6 characters, must contain letter and digit)
     * - **role**: User role (ADMIN, MANAGER, USER)
     */
    post: operations["register_api_v1_auth_register_post"];
  };
  "/api/v1/auth/login": {
    /**
     * Login
     * @description Login with username/email and password
     *
     * Returns JWT access token and user information
     */
    post: operations["login_api_v1_auth_login_post"];
  };
  "/api/v1/auth/me": {
    /**
     * Get Current User Info
     * @description Get current user information
     *
     * Requires authentication
     */
    get: operations["get_current_user_info_api_v1_auth_me_get"];
    /**
     * Update Current User
     * @description Update current user information
     *
     * Users can only update their own profile (except admins)
     */
    put: operations["update_current_user_api_v1_auth_me_put"];
  };
  "/api/v1/auth/me/change-password": {
    /**
     * Change Password
     * @description Change current user password
     */
    post: operations["change_password_api_v1_auth_me_change_password_post"];
  };
  "/api/v1/auth/users": {
    /**
     * List Users
     * @description List all users (Admin only)
     */
    get: operations["list_users_api_v1_auth_users_get"];
  };
  "/api/v1/auth/users/{user_id}": {
    /**
     * Get User
     * @description Get user by ID (Admin only or own profile)
     */
    get: operations["get_user_api_v1_auth_users__user_id__get"];
    /**
     * Update User
     * @description Update user by ID (Admin only)
     */
    put: operations["update_user_api_v1_auth_users__user_id__put"];
    /**
     * Delete User
     * @description Delete user by ID (Admin only)
     *
     * Note: This is a hard delete. Consider using deactivation instead.
     */
    delete: operations["delete_user_api_v1_auth_users__user_id__delete"];
  };
  "/api/v1/departments/": {
    /**
     * List Departments
     * @description List all departments
     *
     * - **ADMIN**: Can see all departments
     * - **MANAGER**: Can see all departments
     * - **USER**: Can only see their own department
     */
    get: operations["list_departments_api_v1_departments__get"];
    /**
     * Create Department
     * @description Create a new department (ADMIN only)
     *
     * - **name**: Department name (unique, 2-255 characters)
     * - **code**: Department code (unique, 2-50 characters)
     * - **description**: Optional description
     * - **manager_name**: Optional manager name
     * - **contact_email**: Optional contact email
     * - **contact_phone**: Optional contact phone
     * - **is_active**: Active status (default: true)
     */
    post: operations["create_department_api_v1_departments__post"];
  };
  "/api/v1/departments/{department_id}": {
    /**
     * Get Department
     * @description Get department by ID
     *
     * - **ADMIN/MANAGER**: Can view any department
     * - **USER**: Can only view their own department
     */
    get: operations["get_department_api_v1_departments__department_id__get"];
    /**
     * Update Department
     * @description Update department by ID (ADMIN only)
     */
    put: operations["update_department_api_v1_departments__department_id__put"];
    /**
     * Deactivate Department
     * @description Deactivate department by ID (ADMIN only)
     *
     * Note: This is a soft delete (sets is_active = false).
     * Department data is preserved for historical reporting.
     */
    delete: operations["deactivate_department_api_v1_departments__department_id__delete"];
  };
  "/api/v1/departments/{department_id}/stats": {
    /**
     * Get Department Stats
     * @description Get department with statistics
     *
     * Returns department info with:
     * - users_count: Number of users in department
     * - expenses_count: Number of expenses
     * - total_budget: Sum of all budget plans
     *
     * - **ADMIN/MANAGER**: Can view any department stats
     * - **USER**: Can only view their own department stats
     */
    get: operations["get_department_stats_api_v1_departments__department_id__stats_get"];
  };
  "/api/v1/departments/{department_id}/activate": {
    /**
     * Activate Department
     * @description Reactivate a deactivated department (ADMIN only)
     */
    post: operations["activate_department_api_v1_departments__department_id__activate_post"];
  };
  "/api/v1/audit/": {
    /**
     * Get Audit Logs
     * @description Get audit logs
     *
     * - **ADMIN**: Can view all audit logs
     * - **MANAGER**: Can view audit logs for all departments
     * - **USER**: Can only view audit logs for their department
     */
    get: operations["get_audit_logs_api_v1_audit__get"];
  };
  "/api/v1/audit/{audit_log_id}": {
    /**
     * Get Audit Log
     * @description Get audit log by ID
     */
    get: operations["get_audit_log_api_v1_audit__audit_log_id__get"];
  };
  "/api/v1/audit/entity/{entity_type}/{entity_id}": {
    /**
     * Get Entity Audit Logs
     * @description Get all audit logs for a specific entity
     *
     * Useful for viewing history of changes to a particular record
     */
    get: operations["get_entity_audit_logs_api_v1_audit_entity__entity_type___entity_id__get"];
  };
  "/api/v1/expenses/export": {
    /**
     * Export Expenses To Excel
     * @description Export expenses to Excel file
     *
     * - **USER**: Can only export expenses from their own department
     * - **MANAGER**: Can export expenses from all departments
     * - **ADMIN**: Can export expenses from all departments
     */
    get: operations["export_expenses_to_excel_api_v1_expenses_export_get"];
  };
  "/api/v1/expenses/": {
    /**
     * Get Expenses
     * @description Get all expenses with filters and pagination
     *
     * - **USER**: Can only see expenses from their own department
     * - **MANAGER**: Can see expenses from all departments
     * - **ADMIN**: Can see expenses from all departments
     */
    get: operations["get_expenses_api_v1_expenses__get"];
    /**
     * Create Expense
     * @description Create new expense
     *
     * Auto-assigns to user's department (or can be specified by ADMIN/MANAGER)
     */
    post: operations["create_expense_api_v1_expenses__post"];
  };
  "/api/v1/expenses/{expense_id}": {
    /**
     * Get Expense
     * @description Get expense by ID
     */
    get: operations["get_expense_api_v1_expenses__expense_id__get"];
    /**
     * Update Expense
     * @description Update expense
     */
    put: operations["update_expense_api_v1_expenses__expense_id__put"];
    /**
     * Delete Expense
     * @description Delete expense
     */
    delete: operations["delete_expense_api_v1_expenses__expense_id__delete"];
  };
  "/api/v1/expenses/{expense_id}/status": {
    /**
     * Update Expense Status
     * @description Update expense status
     */
    patch: operations["update_expense_status_api_v1_expenses__expense_id__status_patch"];
  };
  "/api/v1/expenses/{expense_id}/mark-reviewed": {
    /**
     * Mark Expense Reviewed
     * @description Mark expense as reviewed (снимает пометку 'needs_review')
     */
    patch: operations["mark_expense_reviewed_api_v1_expenses__expense_id__mark_reviewed_patch"];
  };
  "/api/v1/expenses/bulk-delete": {
    /**
     * Bulk Delete Expenses
     * @description Bulk delete expenses by IDs (ADMIN only)
     *
     * Returns the number of deleted expenses
     */
    post: operations["bulk_delete_expenses_api_v1_expenses_bulk_delete_post"];
  };
  "/api/v1/expenses/stats/totals": {
    /**
     * Get Expense Totals
     * @description Get expense totals with filters
     */
    get: operations["get_expense_totals_api_v1_expenses_stats_totals_get"];
  };
  "/api/v1/expenses/import/ftp": {
    /**
     * Import Expenses From Ftp
     * @description Import expenses from FTP server
     *
     * This endpoint will:
     * 1. Download Excel file from FTP
     * 2. Delete expenses from specified month onwards (default: July 2025)
     * 3. Import new expenses from the file
     * 4. Skip duplicates based on expense number
     */
    post: operations["import_expenses_from_ftp_api_v1_expenses_import_ftp_post"];
  };
  "/api/v1/categories/": {
    /**
     * Get Categories
     * @description Get all budget categories
     *
     * - **USER**: Can only see categories from their own department
     * - **MANAGER**: Can see categories from all departments
     * - **ADMIN**: Can see categories from all departments
     */
    get: operations["get_categories_api_v1_categories__get"];
    /**
     * Create Category
     * @description Create new budget category
     *
     * Auto-assigns to user's department (or can be specified by ADMIN)
     */
    post: operations["create_category_api_v1_categories__post"];
  };
  "/api/v1/categories/{category_id}": {
    /**
     * Get Category
     * @description Get category by ID
     */
    get: operations["get_category_api_v1_categories__category_id__get"];
    /**
     * Update Category
     * @description Update budget category
     */
    put: operations["update_category_api_v1_categories__category_id__put"];
    /**
     * Delete Category
     * @description Delete budget category (soft delete - mark as inactive)
     */
    delete: operations["delete_category_api_v1_categories__category_id__delete"];
  };
  "/api/v1/categories/bulk/update": {
    /**
     * Bulk Update Categories
     * @description Bulk update categories (activate/deactivate)
     */
    post: operations["bulk_update_categories_api_v1_categories_bulk_update_post"];
  };
  "/api/v1/categories/bulk/delete": {
    /**
     * Bulk Delete Categories
     * @description Bulk delete categories (soft delete - mark as inactive)
     */
    post: operations["bulk_delete_categories_api_v1_categories_bulk_delete_post"];
  };
  "/api/v1/categories/export": {
    /**
     * Export Categories
     * @description Export all categories to Excel
     */
    get: operations["export_categories_api_v1_categories_export_get"];
  };
  "/api/v1/categories/import": {
    /**
     * Import Categories
     * @description Import categories from Excel file
     *
     * All imported categories are assigned to the user's department
     */
    post: operations["import_categories_api_v1_categories_import_post"];
  };
  "/api/v1/contractors/": {
    /**
     * Get Contractors
     * @description Get all contractors
     *
     * - **USER**: Can only see contractors from their own department
     * - **MANAGER**: Can see contractors from all departments
     * - **ADMIN**: Can see contractors from all departments
     */
    get: operations["get_contractors_api_v1_contractors__get"];
    /**
     * Create Contractor
     * @description Create new contractor
     *
     * Auto-assigns to user's department (or can be specified by ADMIN)
     */
    post: operations["create_contractor_api_v1_contractors__post"];
  };
  "/api/v1/contractors/{contractor_id}": {
    /**
     * Get Contractor
     * @description Get contractor by ID
     */
    get: operations["get_contractor_api_v1_contractors__contractor_id__get"];
    /**
     * Update Contractor
     * @description Update contractor
     */
    put: operations["update_contractor_api_v1_contractors__contractor_id__put"];
    /**
     * Delete Contractor
     * @description Delete contractor (permanently remove from database)
     */
    delete: operations["delete_contractor_api_v1_contractors__contractor_id__delete"];
  };
  "/api/v1/contractors/bulk/update": {
    /**
     * Bulk Update Contractors
     * @description Bulk activate/deactivate contractors
     */
    post: operations["bulk_update_contractors_api_v1_contractors_bulk_update_post"];
  };
  "/api/v1/contractors/bulk/delete": {
    /**
     * Bulk Delete Contractors
     * @description Bulk delete contractors (permanently remove from database)
     */
    post: operations["bulk_delete_contractors_api_v1_contractors_bulk_delete_post"];
  };
  "/api/v1/contractors/export": {
    /**
     * Export Contractors
     * @description Export contractors to Excel
     */
    get: operations["export_contractors_api_v1_contractors_export_get"];
  };
  "/api/v1/contractors/import": {
    /**
     * Import Contractors
     * @description Import contractors from Excel
     *
     * All imported contractors are assigned to the user's department
     */
    post: operations["import_contractors_api_v1_contractors_import_post"];
  };
  "/api/v1/organizations/": {
    /**
     * Get Organizations
     * @description Get all organizations
     *
     * - **USER**: Can only see organizations from their own department
     * - **MANAGER**: Can see organizations from all departments
     * - **ADMIN**: Can see organizations from all departments
     */
    get: operations["get_organizations_api_v1_organizations__get"];
    /**
     * Create Organization
     * @description Create new organization
     *
     * Auto-assigns to user's department (or can be specified by ADMIN)
     */
    post: operations["create_organization_api_v1_organizations__post"];
  };
  "/api/v1/organizations/{organization_id}": {
    /**
     * Get Organization
     * @description Get organization by ID
     */
    get: operations["get_organization_api_v1_organizations__organization_id__get"];
    /**
     * Update Organization
     * @description Update organization
     */
    put: operations["update_organization_api_v1_organizations__organization_id__put"];
    /**
     * Delete Organization
     * @description Delete organization (permanently remove from database)
     */
    delete: operations["delete_organization_api_v1_organizations__organization_id__delete"];
  };
  "/api/v1/organizations/bulk/update": {
    /**
     * Bulk Update Organizations
     * @description Bulk activate/deactivate organizations
     */
    post: operations["bulk_update_organizations_api_v1_organizations_bulk_update_post"];
  };
  "/api/v1/organizations/bulk/delete": {
    /**
     * Bulk Delete Organizations
     * @description Bulk delete organizations (permanently remove from database)
     */
    post: operations["bulk_delete_organizations_api_v1_organizations_bulk_delete_post"];
  };
  "/api/v1/organizations/export": {
    /**
     * Export Organizations
     * @description Export organizations to Excel
     */
    get: operations["export_organizations_api_v1_organizations_export_get"];
  };
  "/api/v1/organizations/import": {
    /**
     * Import Organizations
     * @description Import organizations from Excel
     *
     * All imported organizations are assigned to the user's department
     */
    post: operations["import_organizations_api_v1_organizations_import_post"];
  };
  "/api/v1/budget/plans": {
    /**
     * Get Budget Plans
     * @description Get budget plans
     */
    get: operations["get_budget_plans_api_v1_budget_plans_get"];
    /**
     * Create Budget Plan
     * @description Create new budget plan
     */
    post: operations["create_budget_plan_api_v1_budget_plans_post"];
  };
  "/api/v1/budget/plans/{plan_id}": {
    /**
     * Get Budget Plan
     * @description Get budget plan by ID
     */
    get: operations["get_budget_plan_api_v1_budget_plans__plan_id__get"];
    /**
     * Update Budget Plan
     * @description Update budget plan
     */
    put: operations["update_budget_plan_api_v1_budget_plans__plan_id__put"];
    /**
     * Delete Budget Plan
     * @description Delete budget plan
     */
    delete: operations["delete_budget_plan_api_v1_budget_plans__plan_id__delete"];
  };
  "/api/v1/budget/summary": {
    /**
     * Get Budget Summary
     * @description Get budget summary (plan vs actual)
     */
    get: operations["get_budget_summary_api_v1_budget_summary_get"];
  };
  "/api/v1/budget/plans/year/{year}": {
    /**
     * Get Budget Plan For Year
     * @description Get budget plan for entire year in pivot format (categories x months)
     */
    get: operations["get_budget_plan_for_year_api_v1_budget_plans_year__year__get"];
  };
  "/api/v1/budget/plans/year/{year}/init": {
    /**
     * Initialize Budget Plan
     * @description Initialize budget plan for the year (create empty entries for all categories and months)
     */
    post: operations["initialize_budget_plan_api_v1_budget_plans_year__year__init_post"];
  };
  "/api/v1/budget/plans/year/{year}/copy-from/{source_year}": {
    /**
     * Copy Budget Plan
     * @description Copy budget plan from source year to target year with optional coefficient
     */
    post: operations["copy_budget_plan_api_v1_budget_plans_year__year__copy_from__source_year__post"];
  };
  "/api/v1/budget/plans/cell": {
    /**
     * Update Budget Cell
     * @description Update a single budget plan cell (upsert)
     */
    patch: operations["update_budget_cell_api_v1_budget_plans_cell_patch"];
  };
  "/api/v1/budget/overview/{year}/{month}": {
    /**
     * Get Budget Overview
     * @description Get budget overview (plan vs actual) for specific month
     */
    get: operations["get_budget_overview_api_v1_budget_overview__year___month__get"];
  };
  "/api/v1/budget/plans/year/{year}/export": {
    /**
     * Export Budget Plan To Excel
     * @description Export budget plan for year to Excel file
     */
    get: operations["export_budget_plan_to_excel_api_v1_budget_plans_year__year__export_get"];
  };
  "/api/v1/budget/overview/{year}/{month}/export": {
    /**
     * Export Budget Overview To Excel
     * @description Export budget overview for specific month to Excel file
     */
    get: operations["export_budget_overview_to_excel_api_v1_budget_overview__year___month__export_get"];
  };
  "/api/v1/budget/planning/scenarios": {
    /**
     * Get Scenarios
     * @description Get budget scenarios
     */
    get: operations["get_scenarios_api_v1_budget_planning_scenarios_get"];
    /**
     * Create Scenario
     * @description Create a new budget scenario
     */
    post: operations["create_scenario_api_v1_budget_planning_scenarios_post"];
  };
  "/api/v1/budget/planning/scenarios/{scenario_id}": {
    /**
     * Get Scenario
     * @description Get a specific scenario by ID
     */
    get: operations["get_scenario_api_v1_budget_planning_scenarios__scenario_id__get"];
    /**
     * Update Scenario
     * @description Update a scenario
     */
    put: operations["update_scenario_api_v1_budget_planning_scenarios__scenario_id__put"];
    /**
     * Delete Scenario
     * @description Delete a scenario
     */
    delete: operations["delete_scenario_api_v1_budget_planning_scenarios__scenario_id__delete"];
  };
  "/api/v1/budget/planning/versions": {
    /**
     * Get Versions
     * @description Get budget versions
     */
    get: operations["get_versions_api_v1_budget_planning_versions_get"];
    /**
     * Create Version
     * @description Create a new budget version
     */
    post: operations["create_version_api_v1_budget_planning_versions_post"];
  };
  "/api/v1/budget/planning/versions/{version_id}": {
    /**
     * Get Version
     * @description Get a specific version with optional details
     */
    get: operations["get_version_api_v1_budget_planning_versions__version_id__get"];
    /**
     * Update Version
     * @description Update a version
     */
    put: operations["update_version_api_v1_budget_planning_versions__version_id__put"];
    /**
     * Delete Version
     * @description Delete a version (and all its details via cascade)
     */
    delete: operations["delete_version_api_v1_budget_planning_versions__version_id__delete"];
  };
  "/api/v1/budget/planning/plan-details": {
    /**
     * Get Plan Details
     * @description Get budget plan details with optional filters
     */
    get: operations["get_plan_details_api_v1_budget_planning_plan_details_get"];
    /**
     * Create Plan Detail
     * @description Create a new plan detail
     */
    post: operations["create_plan_detail_api_v1_budget_planning_plan_details_post"];
  };
  "/api/v1/budget/planning/plan-details/{detail_id}": {
    /**
     * Get Plan Detail
     * @description Get a specific plan detail by ID
     */
    get: operations["get_plan_detail_api_v1_budget_planning_plan_details__detail_id__get"];
    /**
     * Update Plan Detail
     * @description Update a plan detail
     */
    put: operations["update_plan_detail_api_v1_budget_planning_plan_details__detail_id__put"];
    /**
     * Delete Plan Detail
     * @description Delete a plan detail
     */
    delete: operations["delete_plan_detail_api_v1_budget_planning_plan_details__detail_id__delete"];
  };
  "/api/v1/budget/planning/versions/{version_id}/submit": {
    /**
     * Submit Version
     * @description Submit version for approval (DRAFT -> IN_REVIEW)
     */
    post: operations["submit_version_api_v1_budget_planning_versions__version_id__submit_post"];
  };
  "/api/v1/budget/planning/versions/{version_id}/approve": {
    /**
     * Approve Version
     * @description Approve a submitted version (IN_REVIEW|REVISION_REQUESTED -> APPROVED)
     */
    post: operations["approve_version_api_v1_budget_planning_versions__version_id__approve_post"];
  };
  "/api/v1/budget/planning/versions/{version_id}/reject": {
    /**
     * Reject Version
     * @description Reject a submitted version (IN_REVIEW|REVISION_REQUESTED -> REJECTED)
     */
    post: operations["reject_version_api_v1_budget_planning_versions__version_id__reject_post"];
  };
  "/api/v1/budget/planning/versions/{version_id}/request-changes": {
    /**
     * Request Changes
     * @description Request changes to a submitted version (IN_REVIEW -> REVISION_REQUESTED)
     */
    post: operations["request_changes_api_v1_budget_planning_versions__version_id__request_changes_post"];
  };
  "/api/v1/budget/planning/versions/compare": {
    /**
     * Compare Versions
     * @description Compare two budget versions
     */
    get: operations["compare_versions_api_v1_budget_planning_versions_compare_get"];
  };
  "/api/v1/budget/planning/baseline/{category_id}": {
    /**
     * Get Baseline
     * @description Get baseline data for a category from a specific year
     */
    get: operations["get_baseline_api_v1_budget_planning_baseline__category_id__get"];
  };
  "/api/v1/budget/planning/calculate/average": {
    /**
     * Calculate By Average
     * @description Calculate budget using average method
     */
    post: operations["calculate_by_average_api_v1_budget_planning_calculate_average_post"];
  };
  "/api/v1/budget/planning/calculate/growth": {
    /**
     * Calculate By Growth
     * @description Calculate budget using growth method
     */
    post: operations["calculate_by_growth_api_v1_budget_planning_calculate_growth_post"];
  };
  "/api/v1/budget/planning/calculate/driver": {
    /**
     * Calculate By Driver
     * @description Calculate budget using driver-based method
     */
    post: operations["calculate_by_driver_api_v1_budget_planning_calculate_driver_post"];
  };
  "/api/v1/analytics/dashboard": {
    /**
     * Get Dashboard Data
     * @description Get dashboard data with key metrics
     */
    get: operations["get_dashboard_data_api_v1_analytics_dashboard_get"];
  };
  "/api/v1/analytics/budget-execution": {
    /**
     * Get Budget Execution
     * @description Get monthly budget execution for the year
     */
    get: operations["get_budget_execution_api_v1_analytics_budget_execution_get"];
  };
  "/api/v1/analytics/by-category": {
    /**
     * Get Analytics By Category
     * @description Get detailed analytics by category
     */
    get: operations["get_analytics_by_category_api_v1_analytics_by_category_get"];
  };
  "/api/v1/analytics/trends": {
    /**
     * Get Trends
     * @description Get spending trends over time
     */
    get: operations["get_trends_api_v1_analytics_trends_get"];
  };
  "/api/v1/analytics/payment-calendar": {
    /**
     * Get Payment Calendar
     * @description Get payment calendar view for a specific month
     * Returns daily aggregated payment data
     */
    get: operations["get_payment_calendar_api_v1_analytics_payment_calendar_get"];
  };
  "/api/v1/analytics/payment-calendar/{date}": {
    /**
     * Get Payments By Day
     * @description Get all payments for a specific day
     * Returns detailed list of expenses
     */
    get: operations["get_payments_by_day_api_v1_analytics_payment_calendar__date__get"];
  };
  "/api/v1/analytics/payment-forecast": {
    /**
     * Get Payment Forecast
     * @description Generate payment forecast for future period
     * Methods: simple_average, moving_average, seasonal
     */
    get: operations["get_payment_forecast_api_v1_analytics_payment_forecast_get"];
  };
  "/api/v1/analytics/payment-forecast/summary": {
    /**
     * Get Payment Forecast Summary
     * @description Get forecast summary comparing different methods
     */
    get: operations["get_payment_forecast_summary_api_v1_analytics_payment_forecast_summary_get"];
  };
  "/api/v1/forecast/generate": {
    /**
     * Generate Forecast
     * @description Generate forecast for next month based on:
     * 1. Regular expenses (repeating monthly)
     * 2. Average of non-regular expenses
     */
    post: operations["generate_forecast_api_v1_forecast_generate_post"];
  };
  "/api/v1/forecast/": {
    /**
     * Get Forecasts
     * @description Get all forecasts for specified month and department
     */
    get: operations["get_forecasts_api_v1_forecast__get"];
    /**
     * Create Forecast
     * @description Create new forecast expense
     */
    post: operations["create_forecast_api_v1_forecast__post"];
  };
  "/api/v1/forecast/{forecast_id}": {
    /**
     * Update Forecast
     * @description Update forecast expense
     */
    put: operations["update_forecast_api_v1_forecast__forecast_id__put"];
    /**
     * Delete Forecast
     * @description Delete forecast expense
     */
    delete: operations["delete_forecast_api_v1_forecast__forecast_id__delete"];
  };
  "/api/v1/forecast/clear/{year}/{month}": {
    /**
     * Clear Forecasts
     * @description Clear all forecasts for specified month and department
     */
    delete: operations["clear_forecasts_api_v1_forecast_clear__year___month__delete"];
  };
  "/api/v1/forecast/export/{year}/{month}": {
    /**
     * Export Forecast Calendar
     * @description Export forecast data as Excel calendar format using template
     * Dates in columns, categories/contractors in rows
     */
    get: operations["export_forecast_calendar_api_v1_forecast_export__year___month__get"];
  };
  "/api/v1/expenses/{expense_id}/attachments": {
    /**
     * Get Expense Attachments
     * @description Get all attachments for an expense
     */
    get: operations["get_expense_attachments_api_v1_expenses__expense_id__attachments_get"];
    /**
     * Upload Attachment
     * @description Upload a file attachment for an expense
     */
    post: operations["upload_attachment_api_v1_expenses__expense_id__attachments_post"];
  };
  "/api/v1/expenses/attachments/{attachment_id}": {
    /**
     * Get Attachment
     * @description Get attachment by ID
     */
    get: operations["get_attachment_api_v1_expenses_attachments__attachment_id__get"];
    /**
     * Delete Attachment
     * @description Delete an attachment
     */
    delete: operations["delete_attachment_api_v1_expenses_attachments__attachment_id__delete"];
    /**
     * Update Attachment
     * @description Update attachment metadata (filename or file_type)
     */
    patch: operations["update_attachment_api_v1_expenses_attachments__attachment_id__patch"];
  };
  "/api/v1/expenses/attachments/{attachment_id}/download": {
    /**
     * Download Attachment
     * @description Download an attachment file
     */
    get: operations["download_attachment_api_v1_expenses_attachments__attachment_id__download_get"];
  };
  "/api/v1/dashboards": {
    /**
     * Get Dashboards
     * @description Get all dashboard configurations
     */
    get: operations["get_dashboards_api_v1_dashboards_get"];
    /**
     * Create Dashboard
     * @description Create a new dashboard configuration
     */
    post: operations["create_dashboard_api_v1_dashboards_post"];
  };
  "/api/v1/dashboards/{dashboard_id}": {
    /**
     * Get Dashboard
     * @description Get dashboard configuration by ID
     */
    get: operations["get_dashboard_api_v1_dashboards__dashboard_id__get"];
    /**
     * Delete Dashboard
     * @description Delete dashboard configuration
     */
    delete: operations["delete_dashboard_api_v1_dashboards__dashboard_id__delete"];
    /**
     * Update Dashboard
     * @description Update dashboard configuration
     */
    patch: operations["update_dashboard_api_v1_dashboards__dashboard_id__patch"];
  };
  "/api/v1/dashboards/default/get": {
    /**
     * Get Default Dashboard
     * @description Get default dashboard configuration
     */
    get: operations["get_default_dashboard_api_v1_dashboards_default_get_get"];
  };
  "/api/v1/dashboards/{dashboard_id}/set-default": {
    /**
     * Set Default Dashboard
     * @description Set a dashboard as default
     */
    post: operations["set_default_dashboard_api_v1_dashboards__dashboard_id__set_default_post"];
  };
  "/api/v1/dashboards/{dashboard_id}/duplicate": {
    /**
     * Duplicate Dashboard
     * @description Duplicate an existing dashboard
     */
    post: operations["duplicate_dashboard_api_v1_dashboards__dashboard_id__duplicate_post"];
  };
  "/api/v1/reports/expenses/by-department": {
    /**
     * Get Expenses By Department Report
     * @description Get expenses report grouped by department
     *
     * Returns summary statistics for each department:
     * - Total expenses
     * - Count of expenses
     * - Average expense amount
     * - OPEX vs CAPEX breakdown
     */
    get: operations["get_expenses_by_department_report_api_v1_reports_expenses_by_department_get"];
  };
  "/api/v1/reports/budget/by-department": {
    /**
     * Get Budget By Department Report
     * @description Get budget vs actual report grouped by department
     *
     * Returns for each department:
     * - Planned budget (OPEX/CAPEX)
     * - Actual expenses (OPEX/CAPEX)
     * - Variance (planned - actual)
     * - Utilization percentage
     */
    get: operations["get_budget_by_department_report_api_v1_reports_budget_by_department_get"];
  };
  "/api/v1/reports/expenses/export-by-department": {
    /**
     * Export Expenses By Department
     * @description Export expenses report by department to Excel
     */
    get: operations["export_expenses_by_department_api_v1_reports_expenses_export_by_department_get"];
  };
  "/api/v1/employees/": {
    /**
     * List Employees
     * @description List all employees with filtering options
     *
     * - **ADMIN/MANAGER**: Can see all employees from all departments
     * - **USER**: Can only see employees from their own department
     */
    get: operations["list_employees_api_v1_employees__get"];
    /**
     * Create Employee
     * @description Create a new employee (ADMIN/MANAGER only)
     */
    post: operations["create_employee_api_v1_employees__post"];
  };
  "/api/v1/employees/{employee_id}": {
    /**
     * Get Employee
     * @description Get a specific employee by ID with salary history
     */
    get: operations["get_employee_api_v1_employees__employee_id__get"];
    /**
     * Update Employee
     * @description Update an employee (ADMIN/MANAGER only)
     */
    put: operations["update_employee_api_v1_employees__employee_id__put"];
    /**
     * Delete Employee
     * @description Delete an employee (ADMIN only)
     */
    delete: operations["delete_employee_api_v1_employees__employee_id__delete"];
  };
  "/api/v1/employees/{employee_id}/salary-history": {
    /**
     * Get Salary History
     * @description Get salary history for an employee
     */
    get: operations["get_salary_history_api_v1_employees__employee_id__salary_history_get"];
    /**
     * Add Salary History
     * @description Add a salary history record (ADMIN/MANAGER only)
     */
    post: operations["add_salary_history_api_v1_employees__employee_id__salary_history_post"];
  };
  "/api/v1/employees/export": {
    /**
     * Export Employees
     * @description Export employees list to Excel
     */
    get: operations["export_employees_api_v1_employees_export_get"];
  };
  "/api/v1/payroll/plans": {
    /**
     * List Payroll Plans
     * @description List all payroll plans with filtering options
     */
    get: operations["list_payroll_plans_api_v1_payroll_plans_get"];
    /**
     * Create Payroll Plan
     * @description Create a new payroll plan (ADMIN/MANAGER only)
     */
    post: operations["create_payroll_plan_api_v1_payroll_plans_post"];
  };
  "/api/v1/payroll/plans/{plan_id}": {
    /**
     * Get Payroll Plan
     * @description Get a specific payroll plan by ID
     */
    get: operations["get_payroll_plan_api_v1_payroll_plans__plan_id__get"];
    /**
     * Update Payroll Plan
     * @description Update a payroll plan (ADMIN/MANAGER only)
     */
    put: operations["update_payroll_plan_api_v1_payroll_plans__plan_id__put"];
    /**
     * Delete Payroll Plan
     * @description Delete a payroll plan (ADMIN only)
     */
    delete: operations["delete_payroll_plan_api_v1_payroll_plans__plan_id__delete"];
  };
  "/api/v1/payroll/actuals": {
    /**
     * List Payroll Actuals
     * @description List all payroll actuals with filtering options
     */
    get: operations["list_payroll_actuals_api_v1_payroll_actuals_get"];
    /**
     * Create Payroll Actual
     * @description Create a new payroll actual (ADMIN/MANAGER only)
     */
    post: operations["create_payroll_actual_api_v1_payroll_actuals_post"];
  };
  "/api/v1/payroll/actuals/{actual_id}": {
    /**
     * Update Payroll Actual
     * @description Update a payroll actual (ADMIN/MANAGER only)
     */
    put: operations["update_payroll_actual_api_v1_payroll_actuals__actual_id__put"];
    /**
     * Delete Payroll Actual
     * @description Delete a payroll actual (ADMIN only)
     */
    delete: operations["delete_payroll_actual_api_v1_payroll_actuals__actual_id__delete"];
  };
  "/api/v1/payroll/analytics/summary": {
    /**
     * Get Payroll Summary
     * @description Get payroll summary by month for a given year
     */
    get: operations["get_payroll_summary_api_v1_payroll_analytics_summary_get"];
  };
  "/api/v1/payroll/plans/export": {
    /**
     * Export Payroll Plans
     * @description Export payroll plans to Excel
     */
    get: operations["export_payroll_plans_api_v1_payroll_plans_export_get"];
  };
  "/api/v1/payroll/actuals/export": {
    /**
     * Export Payroll Actuals
     * @description Export payroll actuals to Excel
     */
    get: operations["export_payroll_actuals_api_v1_payroll_actuals_export_get"];
  };
  "/api/v1/payroll/analytics/salary-stats": {
    /**
     * Get Salary Statistics
     * @description Get salary distribution statistics including median and percentiles
     */
    get: operations["get_salary_statistics_api_v1_payroll_analytics_salary_stats_get"];
  };
  "/api/v1/payroll/analytics/structure": {
    /**
     * Get Payroll Structure
     * @description Get payroll structure breakdown by month (base salary vs bonus vs other payments)
     */
    get: operations["get_payroll_structure_api_v1_payroll_analytics_structure_get"];
  };
  "/api/v1/payroll/analytics/dynamics": {
    /**
     * Get Payroll Dynamics
     * @description Get payroll dynamics over time including plan vs actual breakdown
     */
    get: operations["get_payroll_dynamics_api_v1_payroll_analytics_dynamics_get"];
  };
  "/api/v1/payroll/analytics/forecast": {
    /**
     * Get Payroll Forecast
     * @description Get payroll forecast for future months based on historical data
     *
     * Uses simple moving average with trend adjustment for forecasting
     */
    get: operations["get_payroll_forecast_api_v1_payroll_analytics_forecast_get"];
  };
  "/api/v1/payroll/plans/import": {
    /**
     * Import Payroll Plans
     * @description Import payroll plans from Excel file
     *
     * Expected columns:
     * - Год (Year)
     * - Месяц (Month)
     * - Сотрудник (Employee full name)
     * - Оклад (Base salary)
     * - Премия (Bonus) - optional
     * - Прочие выплаты (Other payments) - optional
     * - Примечания (Notes) - optional
     *
     * Only ADMIN and MANAGER can import payroll plans
     */
    post: operations["import_payroll_plans_api_v1_payroll_plans_import_post"];
  };
  "/api/v1/kpi/goals": {
    /**
     * List Kpi Goals
     * @description List all KPI goals with filtering options
     */
    get: operations["list_kpi_goals_api_v1_kpi_goals_get"];
    /**
     * Create Kpi Goal
     * @description Create a new KPI goal
     */
    post: operations["create_kpi_goal_api_v1_kpi_goals_post"];
  };
  "/api/v1/kpi/goals/{goal_id}": {
    /**
     * Get Kpi Goal
     * @description Get a specific KPI goal by ID
     */
    get: operations["get_kpi_goal_api_v1_kpi_goals__goal_id__get"];
    /**
     * Update Kpi Goal
     * @description Update a KPI goal
     */
    put: operations["update_kpi_goal_api_v1_kpi_goals__goal_id__put"];
    /**
     * Delete Kpi Goal
     * @description Delete a KPI goal
     */
    delete: operations["delete_kpi_goal_api_v1_kpi_goals__goal_id__delete"];
  };
  "/api/v1/kpi/employee-kpis": {
    /**
     * List Employee Kpis
     * @description List all employee KPIs with filtering options
     */
    get: operations["list_employee_kpis_api_v1_kpi_employee_kpis_get"];
    /**
     * Create Employee Kpi
     * @description Create a new employee KPI record
     */
    post: operations["create_employee_kpi_api_v1_kpi_employee_kpis_post"];
  };
  "/api/v1/kpi/employee-kpis/{kpi_id}": {
    /**
     * Get Employee Kpi
     * @description Get a specific employee KPI by ID
     */
    get: operations["get_employee_kpi_api_v1_kpi_employee_kpis__kpi_id__get"];
    /**
     * Update Employee Kpi
     * @description Update an employee KPI record
     */
    put: operations["update_employee_kpi_api_v1_kpi_employee_kpis__kpi_id__put"];
    /**
     * Delete Employee Kpi
     * @description Delete an employee KPI record
     */
    delete: operations["delete_employee_kpi_api_v1_kpi_employee_kpis__kpi_id__delete"];
  };
  "/api/v1/kpi/employee-kpi-goals": {
    /**
     * List Employee Kpi Goals
     * @description List all employee KPI goal assignments
     */
    get: operations["list_employee_kpi_goals_api_v1_kpi_employee_kpi_goals_get"];
    /**
     * Create Employee Kpi Goal
     * @description Assign a KPI goal to an employee
     */
    post: operations["create_employee_kpi_goal_api_v1_kpi_employee_kpi_goals_post"];
  };
  "/api/v1/kpi/employee-kpi-goals/{assignment_id}": {
    /**
     * Update Employee Kpi Goal
     * @description Update an employee KPI goal assignment
     */
    put: operations["update_employee_kpi_goal_api_v1_kpi_employee_kpi_goals__assignment_id__put"];
    /**
     * Delete Employee Kpi Goal
     * @description Delete an employee KPI goal assignment
     */
    delete: operations["delete_employee_kpi_goal_api_v1_kpi_employee_kpi_goals__assignment_id__delete"];
  };
  "/api/v1/kpi/analytics/employee-summary": {
    /**
     * Get Employee Kpi Summary
     * @description Get KPI summary for employees
     */
    get: operations["get_employee_kpi_summary_api_v1_kpi_analytics_employee_summary_get"];
  };
  "/": {
    /**
     * Root
     * @description Root endpoint
     */
    get: operations["root__get"];
  };
  "/health": {
    /**
     * Health Check
     * @description Health check endpoint
     */
    get: operations["health_check_health_get"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /**
     * ApprovalActionEnum
     * @description Enum for approval actions
     * @enum {string}
     */
    ApprovalActionEnum: "SUBMITTED" | "APPROVED" | "REJECTED" | "REVISION_REQUESTED";
    /**
     * AttachmentInDB
     * @description Schema for attachment from database
     */
    AttachmentInDB: {
      /** Filename */
      filename: string;
      /** File Type */
      file_type?: string | null;
      /** Uploaded By */
      uploaded_by?: string | null;
      /** Id */
      id: number;
      /** Expense Id */
      expense_id: number;
      /** File Path */
      file_path: string;
      /** File Size */
      file_size: number;
      /** Mime Type */
      mime_type?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * AttachmentList
     * @description Schema for attachment list
     */
    AttachmentList: {
      /** Items */
      items: components["schemas"]["AttachmentInDB"][];
      /** Total */
      total: number;
    };
    /**
     * AttachmentUpdate
     * @description Schema for updating attachment
     */
    AttachmentUpdate: {
      /** Filename */
      filename?: string | null;
      /** File Type */
      file_type?: string | null;
    };
    /**
     * AuditActionEnum
     * @description Enum for audit log actions
     * @enum {string}
     */
    AuditActionEnum: "CREATE" | "UPDATE" | "DELETE" | "LOGIN" | "LOGOUT" | "EXPORT" | "IMPORT" | "APPROVE" | "REJECT";
    /**
     * AuditLogWithUser
     * @description Schema for audit log with user information
     */
    AuditLogWithUser: {
      action: components["schemas"]["AuditActionEnum"];
      /** Entity Type */
      entity_type: string;
      /** Entity Id */
      entity_id?: number | null;
      /** Description */
      description?: string | null;
      /** Changes */
      changes?: Record<string, never> | null;
      /** Id */
      id: number;
      /** User Id */
      user_id: number | null;
      /** Ip Address */
      ip_address: string | null;
      /** User Agent */
      user_agent: string | null;
      /** Department Id */
      department_id: number | null;
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /** Username */
      username?: string | null;
      /** User Full Name */
      user_full_name?: string | null;
    };
    /**
     * BaselineSummary
     * @description Summary of baseline year (e.g., 2025) expenses
     */
    BaselineSummary: {
      /** Category Id */
      category_id: number;
      /** Category Name */
      category_name: string;
      /** Total Amount */
      total_amount: string;
      /** Monthly Avg */
      monthly_avg: string;
      /** Monthly Breakdown */
      monthly_breakdown: Record<string, never>[];
      /** Capex Total */
      capex_total: string;
      /** Opex Total */
      opex_total: string;
    };
    /** Body_import_categories_api_v1_categories_import_post */
    Body_import_categories_api_v1_categories_import_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** Body_import_contractors_api_v1_contractors_import_post */
    Body_import_contractors_api_v1_contractors_import_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** Body_import_organizations_api_v1_organizations_import_post */
    Body_import_organizations_api_v1_organizations_import_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** Body_import_payroll_plans_api_v1_payroll_plans_import_post */
    Body_import_payroll_plans_api_v1_payroll_plans_import_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** Body_upload_attachment_api_v1_expenses__expense_id__attachments_post */
    Body_upload_attachment_api_v1_expenses__expense_id__attachments_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      /** File Type */
      file_type?: string;
      /** Uploaded By */
      uploaded_by?: string;
    };
    /**
     * BonusTypeEnum
     * @description Enum for bonus calculation types
     * @enum {string}
     */
    BonusTypeEnum: "PERFORMANCE_BASED" | "FIXED" | "MIXED";
    /**
     * BudgetApprovalLogInDB
     * @description Schema for budget approval log from database
     */
    BudgetApprovalLogInDB: {
      /** Version Id */
      version_id: number;
      /**
       * Iteration Number
       * @description Approval round (1, 2, 3...)
       */
      iteration_number: number;
      /** Reviewer Name */
      reviewer_name: string;
      /**
       * Reviewer Role
       * @description CFO, CEO, Head of IT
       */
      reviewer_role: string;
      action: components["schemas"]["ApprovalActionEnum"];
      /**
       * Decision Date
       * Format: date-time
       */
      decision_date: string;
      /** Comments */
      comments?: string | null;
      /** Requested Changes */
      requested_changes?: Record<string, never> | null;
      /** Next Action */
      next_action?: string | null;
      /** Deadline */
      deadline?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /**
     * BudgetCategoryCreate
     * @description Schema for creating budget category
     */
    BudgetCategoryCreate: {
      /** Name */
      name: string;
      type: components["schemas"]["ExpenseTypeEnum"];
      /** Description */
      description?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Parent Id */
      parent_id?: number | null;
      /** Department Id */
      department_id?: number | null;
    };
    /**
     * BudgetCategoryInDB
     * @description Schema for budget category from database
     */
    BudgetCategoryInDB: {
      /** Name */
      name: string;
      type: components["schemas"]["ExpenseTypeEnum"];
      /** Description */
      description?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Parent Id */
      parent_id?: number | null;
      /** Id */
      id: number;
      /** Department Id */
      department_id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * BudgetCategoryUpdate
     * @description Schema for updating budget category
     */
    BudgetCategoryUpdate: {
      /** Name */
      name?: string | null;
      type?: components["schemas"]["ExpenseTypeEnum"] | null;
      /** Description */
      description?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Parent Id */
      parent_id?: number | null;
    };
    /**
     * BudgetPlanCreate
     * @description Schema for creating budget plan
     */
    BudgetPlanCreate: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Category Id */
      category_id: number;
      /** Planned Amount */
      planned_amount: number | string;
      /**
       * Capex Planned
       * @default 0
       */
      capex_planned?: number | string;
      /**
       * Opex Planned
       * @default 0
       */
      opex_planned?: number | string;
    };
    /**
     * BudgetPlanDetailCreate
     * @description Schema for creating budget plan detail
     */
    BudgetPlanDetailCreate: {
      /** Version Id */
      version_id: number;
      /**
       * Month
       * @description Month (1-12)
       */
      month: number;
      /** Category Id */
      category_id: number;
      /** Subcategory */
      subcategory?: string | null;
      /**
       * Planned Amount
       * @description Planned amount
       */
      planned_amount: number | string;
      type: components["schemas"]["ExpenseTypeEnum"];
      calculation_method?: components["schemas"]["CalculationMethodEnum"] | null;
      /** Calculation Params */
      calculation_params?: Record<string, never> | null;
      /** Business Driver */
      business_driver?: string | null;
      /** Justification */
      justification?: string | null;
      /** Based On Year */
      based_on_year?: number | null;
      /** Based On Avg */
      based_on_avg?: number | string | null;
      /** Based On Total */
      based_on_total?: number | string | null;
      /** Growth Rate */
      growth_rate?: number | string | null;
    };
    /**
     * BudgetPlanDetailInDB
     * @description Schema for budget plan detail from database
     */
    BudgetPlanDetailInDB: {
      /** Version Id */
      version_id: number;
      /**
       * Month
       * @description Month (1-12)
       */
      month: number;
      /** Category Id */
      category_id: number;
      /** Subcategory */
      subcategory?: string | null;
      /**
       * Planned Amount
       * @description Planned amount
       */
      planned_amount: string;
      type: components["schemas"]["ExpenseTypeEnum"];
      calculation_method?: components["schemas"]["CalculationMethodEnum"] | null;
      /** Calculation Params */
      calculation_params?: Record<string, never> | null;
      /** Business Driver */
      business_driver?: string | null;
      /** Justification */
      justification?: string | null;
      /** Based On Year */
      based_on_year?: number | null;
      /** Based On Avg */
      based_on_avg?: string | null;
      /** Based On Total */
      based_on_total?: string | null;
      /** Growth Rate */
      growth_rate?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * BudgetPlanDetailUpdate
     * @description Schema for updating budget plan detail
     */
    BudgetPlanDetailUpdate: {
      /** Month */
      month?: number | null;
      /** Category Id */
      category_id?: number | null;
      /** Subcategory */
      subcategory?: string | null;
      /** Planned Amount */
      planned_amount?: number | string | null;
      type?: components["schemas"]["ExpenseTypeEnum"] | null;
      calculation_method?: components["schemas"]["CalculationMethodEnum"] | null;
      /** Calculation Params */
      calculation_params?: Record<string, never> | null;
      /** Business Driver */
      business_driver?: string | null;
      /** Justification */
      justification?: string | null;
      /** Based On Year */
      based_on_year?: number | null;
      /** Based On Avg */
      based_on_avg?: number | string | null;
      /** Based On Total */
      based_on_total?: number | string | null;
      /** Growth Rate */
      growth_rate?: number | string | null;
    };
    /**
     * BudgetPlanInDB
     * @description Schema for budget plan from database
     */
    BudgetPlanInDB: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Category Id */
      category_id: number;
      /** Planned Amount */
      planned_amount: string;
      /**
       * Capex Planned
       * @default 0
       */
      capex_planned?: string;
      /**
       * Opex Planned
       * @default 0
       */
      opex_planned?: string;
      /** Id */
      id: number;
      status: components["schemas"]["BudgetStatusEnum"];
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * BudgetPlanUpdate
     * @description Schema for updating budget plan
     */
    BudgetPlanUpdate: {
      /** Year */
      year?: number | null;
      /** Month */
      month?: number | null;
      /** Category Id */
      category_id?: number | null;
      /** Planned Amount */
      planned_amount?: number | string | null;
      /** Capex Planned */
      capex_planned?: number | string | null;
      /** Opex Planned */
      opex_planned?: number | string | null;
    };
    /**
     * BudgetScenarioCreate
     * @description Schema for creating budget scenario - department_id auto-assigned from current_user
     */
    BudgetScenarioCreate: {
      /**
       * Year
       * @description Planning year (e.g., 2026)
       */
      year: number;
      /**
       * Scenario Name
       * @description Scenario name
       */
      scenario_name: string;
      scenario_type: components["schemas"]["BudgetScenarioTypeEnum"];
      /**
       * Global Growth Rate
       * @description Global growth rate %
       * @default 0
       */
      global_growth_rate?: number | string;
      /**
       * Inflation Rate
       * @description Inflation rate %
       * @default 0
       */
      inflation_rate?: number | string;
      /**
       * Fx Rate
       * @description FX rate for imports
       */
      fx_rate?: number | string | null;
      /**
       * Assumptions
       * @description Business assumptions (JSON)
       */
      assumptions?: Record<string, never> | null;
      /** Description */
      description?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
    };
    /**
     * BudgetScenarioInDB
     * @description Schema for budget scenario from database
     */
    BudgetScenarioInDB: {
      /**
       * Year
       * @description Planning year (e.g., 2026)
       */
      year: number;
      /**
       * Scenario Name
       * @description Scenario name
       */
      scenario_name: string;
      scenario_type: components["schemas"]["BudgetScenarioTypeEnum"];
      /**
       * Global Growth Rate
       * @description Global growth rate %
       * @default 0
       */
      global_growth_rate?: string;
      /**
       * Inflation Rate
       * @description Inflation rate %
       * @default 0
       */
      inflation_rate?: string;
      /**
       * Fx Rate
       * @description FX rate for imports
       */
      fx_rate?: string | null;
      /**
       * Assumptions
       * @description Business assumptions (JSON)
       */
      assumptions?: Record<string, never> | null;
      /** Description */
      description?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Id */
      id: number;
      /** Department Id */
      department_id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Created By */
      created_by: string | null;
    };
    /**
     * BudgetScenarioTypeEnum
     * @description Enum for budget scenario types
     * @enum {string}
     */
    BudgetScenarioTypeEnum: "BASE" | "OPTIMISTIC" | "PESSIMISTIC";
    /**
     * BudgetScenarioUpdate
     * @description Schema for updating budget scenario
     */
    BudgetScenarioUpdate: {
      /** Scenario Name */
      scenario_name?: string | null;
      /** Global Growth Rate */
      global_growth_rate?: number | string | null;
      /** Inflation Rate */
      inflation_rate?: number | string | null;
      /** Fx Rate */
      fx_rate?: number | string | null;
      /** Assumptions */
      assumptions?: Record<string, never> | null;
      /** Description */
      description?: string | null;
      /** Is Active */
      is_active?: boolean | null;
    };
    /**
     * BudgetStatusEnum
     * @description Enum for budget plan statuses
     * @enum {string}
     */
    BudgetStatusEnum: "DRAFT" | "APPROVED";
    /**
     * BudgetVersionCreate
     * @description Schema for creating budget version - department_id auto-assigned from current_user, version_number auto-incremented
     */
    BudgetVersionCreate: {
      /**
       * Year
       * @description Planning year (e.g., 2026)
       */
      year: number;
      /**
       * Version Name
       * @description Version name
       */
      version_name?: string | null;
      /** Scenario Id */
      scenario_id?: number | null;
      /** @default DRAFT */
      status?: components["schemas"]["BudgetVersionStatusEnum"];
      /** Comments */
      comments?: string | null;
      /** Change Log */
      change_log?: string | null;
      /**
       * Copy From Version Id
       * @description Copy from existing version
       */
      copy_from_version_id?: number | null;
      /**
       * Auto Calculate
       * @description Auto-calculate from previous year
       * @default false
       */
      auto_calculate?: boolean;
    };
    /**
     * BudgetVersionInDB
     * @description Schema for budget version from database
     */
    BudgetVersionInDB: {
      /**
       * Year
       * @description Planning year (e.g., 2026)
       */
      year: number;
      /**
       * Version Name
       * @description Version name
       */
      version_name?: string | null;
      /** Scenario Id */
      scenario_id?: number | null;
      /** @default DRAFT */
      status?: components["schemas"]["BudgetVersionStatusEnum"];
      /** Comments */
      comments?: string | null;
      /** Change Log */
      change_log?: string | null;
      /** Id */
      id: number;
      /** Version Number */
      version_number: number;
      /** Department Id */
      department_id: number;
      /** Created By */
      created_by: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Submitted At */
      submitted_at: string | null;
      /** Approved At */
      approved_at: string | null;
      /** Approved By */
      approved_by: string | null;
      /** Total Amount */
      total_amount: string;
      /** Total Capex */
      total_capex: string;
      /** Total Opex */
      total_opex: string;
    };
    /**
     * BudgetVersionStatusEnum
     * @description Enum for budget version statuses (planning 2026 workflow)
     * @enum {string}
     */
    BudgetVersionStatusEnum: "DRAFT" | "IN_REVIEW" | "REVISION_REQUESTED" | "APPROVED" | "REJECTED" | "ARCHIVED";
    /**
     * BudgetVersionUpdate
     * @description Schema for updating budget version
     */
    BudgetVersionUpdate: {
      /** Version Name */
      version_name?: string | null;
      /** Scenario Id */
      scenario_id?: number | null;
      status?: components["schemas"]["BudgetVersionStatusEnum"] | null;
      /** Comments */
      comments?: string | null;
      /** Change Log */
      change_log?: string | null;
      /** Submitted At */
      submitted_at?: string | null;
      /** Approved At */
      approved_at?: string | null;
      /** Approved By */
      approved_by?: string | null;
    };
    /**
     * BudgetVersionWithDetails
     * @description Schema for budget version with plan details
     */
    BudgetVersionWithDetails: {
      /**
       * Year
       * @description Planning year (e.g., 2026)
       */
      year: number;
      /**
       * Version Name
       * @description Version name
       */
      version_name?: string | null;
      /** Scenario Id */
      scenario_id?: number | null;
      /** @default DRAFT */
      status?: components["schemas"]["BudgetVersionStatusEnum"];
      /** Comments */
      comments?: string | null;
      /** Change Log */
      change_log?: string | null;
      /** Id */
      id: number;
      /** Version Number */
      version_number: number;
      /** Department Id */
      department_id: number;
      /** Created By */
      created_by: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Submitted At */
      submitted_at: string | null;
      /** Approved At */
      approved_at: string | null;
      /** Approved By */
      approved_by: string | null;
      /** Total Amount */
      total_amount: string;
      /** Total Capex */
      total_capex: string;
      /** Total Opex */
      total_opex: string;
      /**
       * Plan Details
       * @default []
       */
      plan_details?: components["schemas"]["BudgetPlanDetailInDB"][];
      scenario?: components["schemas"]["BudgetScenarioInDB"] | null;
      /**
       * Approval Logs
       * @default []
       */
      approval_logs?: components["schemas"]["BudgetApprovalLogInDB"][];
    };
    /**
     * CalculateByAverageRequest
     * @description Request schema for calculate by average method - department_id auto-assigned from current_user
     */
    CalculateByAverageRequest: {
      /** Category Id */
      category_id: number;
      /**
       * Base Year
       * @description Base year for calculation (e.g., 2025)
       */
      base_year: number;
      /**
       * Adjustment Percent
       * @description Adjustment % (inflation, growth)
       * @default 0
       */
      adjustment_percent?: number | string;
      /**
       * Target Year
       * @description Target year (e.g., 2026)
       */
      target_year: number;
    };
    /**
     * CalculateByDriverRequest
     * @description Request schema for calculate by driver method - department_id auto-assigned from current_user
     */
    CalculateByDriverRequest: {
      /** Category Id */
      category_id: number;
      /** Base Year */
      base_year: number;
      /**
       * Driver Type
       * @description Driver type: headcount, projects, revenue, etc
       */
      driver_type: string;
      /**
       * Base Driver Value
       * @description Driver value in base year
       */
      base_driver_value: number | string;
      /**
       * Planned Driver Value
       * @description Planned driver value for target year
       */
      planned_driver_value: number | string;
      /**
       * Cost Per Unit
       * @description Cost per driver unit (optional, will calculate if not provided)
       */
      cost_per_unit?: number | string | null;
      /**
       * Adjustment Percent
       * @description Additional adjustment %
       * @default 0
       */
      adjustment_percent?: number | string;
      /** Target Year */
      target_year: number;
    };
    /**
     * CalculateByGrowthRequest
     * @description Request schema for calculate by growth method - department_id auto-assigned from current_user
     */
    CalculateByGrowthRequest: {
      /** Category Id */
      category_id: number;
      /** Base Year */
      base_year: number;
      /**
       * Growth Rate
       * @description Growth rate %
       */
      growth_rate: number | string;
      /**
       * Inflation Rate
       * @description Inflation rate %
       * @default 0
       */
      inflation_rate?: number | string;
      /** Target Year */
      target_year: number;
    };
    /**
     * CalculationMethodEnum
     * @description Enum for budget calculation methods
     * @enum {string}
     */
    CalculationMethodEnum: "AVERAGE" | "GROWTH" | "DRIVER_BASED" | "SEASONAL" | "MANUAL";
    /**
     * CalculationResult
     * @description Response schema for calculation results
     */
    CalculationResult: {
      /** Category Id */
      category_id: number;
      /** Annual Total */
      annual_total: string;
      /** Monthly Avg */
      monthly_avg: string;
      /** Growth Percent */
      growth_percent: string;
      /**
       * Monthly Breakdown
       * @description Monthly breakdown: [{'month': 1, 'amount': 560000}, ...]
       */
      monthly_breakdown: Record<string, never>[];
      calculation_method: components["schemas"]["CalculationMethodEnum"];
      /** Calculation Params */
      calculation_params: Record<string, never>;
      /** Based On Total */
      based_on_total: string;
      /** Based On Avg */
      based_on_avg: string;
    };
    /** CategoryAnalytics */
    CategoryAnalytics: {
      /** Year */
      year: number;
      /** Month */
      month?: number | null;
      /** Categories */
      categories: components["schemas"]["CategoryAnalyticsItem"][];
    };
    /** CategoryAnalyticsItem */
    CategoryAnalyticsItem: {
      /** Category Id */
      category_id: number;
      /** Category Name */
      category_name: string;
      /** Category Type */
      category_type: string;
      /** Parent Id */
      parent_id: number | null;
      /** Planned */
      planned: number;
      /** Actual */
      actual: number;
      /** Remaining */
      remaining: number;
      /** Execution Percent */
      execution_percent: number;
      /** Expense Count */
      expense_count: number;
    };
    /**
     * CellUpdateRequest
     * @description Request to update a single budget cell
     */
    CellUpdateRequest: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Category Id */
      category_id: number;
      /** Planned Amount */
      planned_amount: number | string;
    };
    /**
     * ContractorCreate
     * @description Schema for creating contractor
     */
    ContractorCreate: {
      /** Name */
      name: string;
      /** Short Name */
      short_name?: string | null;
      /** Inn */
      inn?: string | null;
      /** Contact Info */
      contact_info?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Department Id */
      department_id?: number | null;
    };
    /**
     * ContractorInDB
     * @description Schema for contractor from database
     */
    ContractorInDB: {
      /** Name */
      name: string;
      /** Short Name */
      short_name?: string | null;
      /** Inn */
      inn?: string | null;
      /** Contact Info */
      contact_info?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Id */
      id: number;
      /** Department Id */
      department_id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * ContractorUpdate
     * @description Schema for updating contractor
     */
    ContractorUpdate: {
      /** Name */
      name?: string | null;
      /** Short Name */
      short_name?: string | null;
      /** Inn */
      inn?: string | null;
      /** Contact Info */
      contact_info?: string | null;
      /** Is Active */
      is_active?: boolean | null;
    };
    /**
     * CopyPlanRequest
     * @description Request to copy budget plan from another year
     */
    CopyPlanRequest: {
      /**
       * Coefficient
       * @default 1
       */
      coefficient?: number;
    };
    /** DashboardByCategoryItem */
    DashboardByCategoryItem: {
      /** Category Id */
      category_id: number | null;
      /** Category Name */
      category_name: string;
      /** Planned */
      planned: number;
      /** Actual */
      actual: number;
      /** Remaining */
      remaining: number;
    };
    /** DashboardByMonthItem */
    DashboardByMonthItem: {
      /** Month */
      month: number;
      /** Planned */
      planned: number;
      /** Actual */
      actual: number;
      /** Remaining */
      remaining: number;
    };
    /** DashboardCapexVsOpex */
    DashboardCapexVsOpex: {
      /** Capex */
      capex: number;
      /** Opex */
      opex: number;
      /** Capex Percent */
      capex_percent: number;
      /** Opex Percent */
      opex_percent: number;
    };
    /**
     * DashboardConfigCreate
     * @description Schema for creating dashboard configuration
     */
    DashboardConfigCreate: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** User Id */
      user_id?: string | null;
      /**
       * Is Default
       * @default false
       */
      is_default?: boolean;
      /**
       * Is Public
       * @default false
       */
      is_public?: boolean;
      /**
       * Config
       * @description Dashboard layout and widgets configuration
       */
      config: Record<string, never>;
    };
    /**
     * DashboardConfigInDB
     * @description Schema for dashboard configuration from database
     */
    DashboardConfigInDB: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** User Id */
      user_id?: string | null;
      /**
       * Is Default
       * @default false
       */
      is_default?: boolean;
      /**
       * Is Public
       * @default false
       */
      is_public?: boolean;
      /**
       * Config
       * @description Dashboard layout and widgets configuration
       */
      config: Record<string, never>;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * DashboardConfigList
     * @description Schema for dashboard configuration list
     */
    DashboardConfigList: {
      /** Items */
      items: components["schemas"]["DashboardConfigInDB"][];
      /** Total */
      total: number;
    };
    /**
     * DashboardConfigUpdate
     * @description Schema for updating dashboard configuration
     */
    DashboardConfigUpdate: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Is Default */
      is_default?: boolean | null;
      /** Is Public */
      is_public?: boolean | null;
      /** Config */
      config?: Record<string, never> | null;
    };
    /** DashboardData */
    DashboardData: {
      /** Year */
      year: number;
      /** Month */
      month?: number | null;
      totals: components["schemas"]["DashboardTotals"];
      capex_vs_opex: components["schemas"]["DashboardCapexVsOpex"];
      /** Status Distribution */
      status_distribution: components["schemas"]["DashboardStatusDistribution"][];
      /** Top Categories */
      top_categories: components["schemas"]["DashboardTopCategory"][];
      /** Recent Expenses */
      recent_expenses: components["schemas"]["DashboardRecentExpense"][];
      /** By Month */
      by_month?: components["schemas"]["DashboardByMonthItem"][] | null;
      /** By Category */
      by_category?: components["schemas"]["DashboardByCategoryItem"][] | null;
    };
    /** DashboardRecentExpense */
    DashboardRecentExpense: {
      /** Id */
      id: number;
      /** Number */
      number: string;
      /** Amount */
      amount: number;
      /** Status */
      status: string;
      /** Request Date */
      request_date: string;
      /** Category Id */
      category_id: number | null;
    };
    /** DashboardStatusDistribution */
    DashboardStatusDistribution: {
      /** Status */
      status: string;
      /** Count */
      count: number;
      /** Amount */
      amount: number;
    };
    /** DashboardTopCategory */
    DashboardTopCategory: {
      /** Category Id */
      category_id: number;
      /** Category Name */
      category_name: string;
      /** Category Type */
      category_type: string;
      /** Amount */
      amount: number;
    };
    /** DashboardTotals */
    DashboardTotals: {
      /** Planned */
      planned: number;
      /** Actual */
      actual: number;
      /** Remaining */
      remaining: number;
      /** Execution Percent */
      execution_percent: number;
    };
    /**
     * Department
     * @description Schema for department response
     */
    Department: {
      /** Name */
      name: string;
      /** Code */
      code: string;
      /** Description */
      description?: string | null;
      /**
       * Ftp Subdivision Name
       * @description Название подразделения из FTP для сопоставления
       */
      ftp_subdivision_name?: string | null;
      /** Manager Name */
      manager_name?: string | null;
      /** Contact Email */
      contact_email?: string | null;
      /** Contact Phone */
      contact_phone?: string | null;
      /** Id */
      id: number;
      /** Is Active */
      is_active: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * DepartmentCreate
     * @description Schema for creating a new department
     */
    DepartmentCreate: {
      /** Name */
      name: string;
      /** Code */
      code: string;
      /** Description */
      description?: string | null;
      /**
       * Ftp Subdivision Name
       * @description Название подразделения из FTP для сопоставления
       */
      ftp_subdivision_name?: string | null;
      /** Manager Name */
      manager_name?: string | null;
      /** Contact Email */
      contact_email?: string | null;
      /** Contact Phone */
      contact_phone?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
    };
    /**
     * DepartmentListItem
     * @description Schema for department in list view
     */
    DepartmentListItem: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** Code */
      code: string;
      /** Description */
      description?: string | null;
      /** Ftp Subdivision Name */
      ftp_subdivision_name?: string | null;
      /** Manager Name */
      manager_name?: string | null;
      /** Contact Email */
      contact_email?: string | null;
      /** Contact Phone */
      contact_phone?: string | null;
      /** Is Active */
      is_active: boolean;
    };
    /**
     * DepartmentUpdate
     * @description Schema for updating department information
     */
    DepartmentUpdate: {
      /** Name */
      name?: string | null;
      /** Code */
      code?: string | null;
      /** Description */
      description?: string | null;
      /**
       * Ftp Subdivision Name
       * @description Название подразделения из FTP для сопоставления
       */
      ftp_subdivision_name?: string | null;
      /** Manager Name */
      manager_name?: string | null;
      /** Contact Email */
      contact_email?: string | null;
      /** Contact Phone */
      contact_phone?: string | null;
      /** Is Active */
      is_active?: boolean | null;
    };
    /**
     * DepartmentWithStats
     * @description Schema for department with statistics
     */
    DepartmentWithStats: {
      /** Name */
      name: string;
      /** Code */
      code: string;
      /** Description */
      description?: string | null;
      /**
       * Ftp Subdivision Name
       * @description Название подразделения из FTP для сопоставления
       */
      ftp_subdivision_name?: string | null;
      /** Manager Name */
      manager_name?: string | null;
      /** Contact Email */
      contact_email?: string | null;
      /** Contact Phone */
      contact_phone?: string | null;
      /** Id */
      id: number;
      /** Is Active */
      is_active: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Users Count
       * @default 0
       */
      users_count?: number;
      /**
       * Expenses Count
       * @default 0
       */
      expenses_count?: number;
      /**
       * Total Budget
       * @default 0
       */
      total_budget?: number;
    };
    /**
     * EmployeeCreate
     * @description Schema for creating employee - department_id auto-assigned from current_user
     */
    EmployeeCreate: {
      /** Full Name */
      full_name: string;
      /** Position */
      position: string;
      /** Employee Number */
      employee_number?: string | null;
      /** Hire Date */
      hire_date?: string | null;
      /** Fire Date */
      fire_date?: string | null;
      /** @default ACTIVE */
      status?: components["schemas"]["EmployeeStatusEnum"];
      /** Base Salary */
      base_salary: number | string;
      /**
       * Monthly Bonus Base
       * @description Базовая месячная премия
       * @default 0
       */
      monthly_bonus_base?: number | string;
      /**
       * Quarterly Bonus Base
       * @description Базовая квартальная премия (опционально)
       */
      quarterly_bonus_base?: number | string | null;
      /**
       * Annual Bonus Base
       * @description Базовая годовая премия (опционально)
       */
      annual_bonus_base?: number | string | null;
      /** Email */
      email?: string | null;
      /** Phone */
      phone?: string | null;
      /** Notes */
      notes?: string | null;
    };
    /**
     * EmployeeInDB
     * @description Schema for employee in database
     */
    EmployeeInDB: {
      /** Full Name */
      full_name: string;
      /** Position */
      position: string;
      /** Employee Number */
      employee_number?: string | null;
      /** Hire Date */
      hire_date?: string | null;
      /** Fire Date */
      fire_date?: string | null;
      /** @default ACTIVE */
      status?: components["schemas"]["EmployeeStatusEnum"];
      /** Base Salary */
      base_salary: string;
      /**
       * Monthly Bonus Base
       * @description Базовая месячная премия
       * @default 0
       */
      monthly_bonus_base?: string;
      /**
       * Quarterly Bonus Base
       * @description Базовая квартальная премия (опционально)
       */
      quarterly_bonus_base?: string | null;
      /**
       * Annual Bonus Base
       * @description Базовая годовая премия (опционально)
       */
      annual_bonus_base?: string | null;
      /** Email */
      email?: string | null;
      /** Phone */
      phone?: string | null;
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /** Department Id */
      department_id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * EmployeeKPICreate
     * @description Schema for creating employee KPI
     */
    EmployeeKPICreate: {
      /** Employee Id */
      employee_id: number;
      /** Year */
      year: number;
      /** Month */
      month: number;
      /**
       * Kpi Percentage
       * @description КПИ% (0-200)
       */
      kpi_percentage?: number | string | null;
      /** @default PERFORMANCE_BASED */
      monthly_bonus_type?: components["schemas"]["BonusTypeEnum"];
      /** @default PERFORMANCE_BASED */
      quarterly_bonus_type?: components["schemas"]["BonusTypeEnum"];
      /** @default PERFORMANCE_BASED */
      annual_bonus_type?: components["schemas"]["BonusTypeEnum"];
      /**
       * Monthly Bonus Base
       * @default 0
       */
      monthly_bonus_base?: number | string;
      /**
       * Quarterly Bonus Base
       * @default 0
       */
      quarterly_bonus_base?: number | string;
      /**
       * Annual Bonus Base
       * @default 0
       */
      annual_bonus_base?: number | string;
      /** Monthly Bonus Calculated */
      monthly_bonus_calculated?: number | string | null;
      /** Quarterly Bonus Calculated */
      quarterly_bonus_calculated?: number | string | null;
      /** Annual Bonus Calculated */
      annual_bonus_calculated?: number | string | null;
      /** Monthly Bonus Fixed Part */
      monthly_bonus_fixed_part?: number | string | null;
      /** Quarterly Bonus Fixed Part */
      quarterly_bonus_fixed_part?: number | string | null;
      /** Annual Bonus Fixed Part */
      annual_bonus_fixed_part?: number | string | null;
      /** Department Id */
      department_id: number;
      /** Notes */
      notes?: string | null;
    };
    /**
     * EmployeeKPIGoalCreate
     * @description Schema for creating employee KPI goal
     */
    EmployeeKPIGoalCreate: {
      /** Employee Id */
      employee_id: number;
      /** Goal Id */
      goal_id: number;
      /** Employee Kpi Id */
      employee_kpi_id?: number | null;
      /** Year */
      year: number;
      /**
       * Month
       * @description Null для годовых целей
       */
      month?: number | null;
      /** Target Value */
      target_value?: number | string | null;
      /** Actual Value */
      actual_value?: number | string | null;
      /**
       * Achievement Percentage
       * @description % выполнения
       */
      achievement_percentage?: number | string | null;
      /** Weight */
      weight?: number | string | null;
      /** @default ACTIVE */
      status?: components["schemas"]["KPIGoalStatusEnum"];
      /** Notes */
      notes?: string | null;
    };
    /**
     * EmployeeKPIGoalInDB
     * @description Schema for employee KPI goal in database
     */
    EmployeeKPIGoalInDB: {
      /** Employee Id */
      employee_id: number;
      /** Goal Id */
      goal_id: number;
      /** Employee Kpi Id */
      employee_kpi_id?: number | null;
      /** Year */
      year: number;
      /**
       * Month
       * @description Null для годовых целей
       */
      month?: number | null;
      /** Target Value */
      target_value?: string | null;
      /** Actual Value */
      actual_value?: string | null;
      /**
       * Achievement Percentage
       * @description % выполнения
       */
      achievement_percentage?: string | null;
      /** Weight */
      weight?: string | null;
      /** @default ACTIVE */
      status?: components["schemas"]["KPIGoalStatusEnum"];
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * EmployeeKPIGoalUpdate
     * @description Schema for updating employee KPI goal
     */
    EmployeeKPIGoalUpdate: {
      /** Employee Id */
      employee_id?: number | null;
      /** Goal Id */
      goal_id?: number | null;
      /** Employee Kpi Id */
      employee_kpi_id?: number | null;
      /** Year */
      year?: number | null;
      /** Month */
      month?: number | null;
      /** Target Value */
      target_value?: number | string | null;
      /** Actual Value */
      actual_value?: number | string | null;
      /** Achievement Percentage */
      achievement_percentage?: number | string | null;
      /** Weight */
      weight?: number | string | null;
      status?: components["schemas"]["KPIGoalStatusEnum"] | null;
      /** Notes */
      notes?: string | null;
    };
    /**
     * EmployeeKPIGoalWithDetails
     * @description Employee KPI goal with goal details
     */
    EmployeeKPIGoalWithDetails: {
      /** Employee Id */
      employee_id: number;
      /** Goal Id */
      goal_id: number;
      /** Employee Kpi Id */
      employee_kpi_id?: number | null;
      /** Year */
      year: number;
      /**
       * Month
       * @description Null для годовых целей
       */
      month?: number | null;
      /** Target Value */
      target_value?: string | null;
      /** Actual Value */
      actual_value?: string | null;
      /**
       * Achievement Percentage
       * @description % выполнения
       */
      achievement_percentage?: string | null;
      /** Weight */
      weight?: string | null;
      /** @default ACTIVE */
      status?: components["schemas"]["KPIGoalStatusEnum"];
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      goal?: components["schemas"]["KPIGoalInDB"] | null;
    };
    /**
     * EmployeeKPIInDB
     * @description Schema for employee KPI in database
     */
    EmployeeKPIInDB: {
      /** Employee Id */
      employee_id: number;
      /** Year */
      year: number;
      /** Month */
      month: number;
      /**
       * Kpi Percentage
       * @description КПИ% (0-200)
       */
      kpi_percentage?: string | null;
      /** @default PERFORMANCE_BASED */
      monthly_bonus_type?: components["schemas"]["BonusTypeEnum"];
      /** @default PERFORMANCE_BASED */
      quarterly_bonus_type?: components["schemas"]["BonusTypeEnum"];
      /** @default PERFORMANCE_BASED */
      annual_bonus_type?: components["schemas"]["BonusTypeEnum"];
      /**
       * Monthly Bonus Base
       * @default 0
       */
      monthly_bonus_base?: string;
      /**
       * Quarterly Bonus Base
       * @default 0
       */
      quarterly_bonus_base?: string;
      /**
       * Annual Bonus Base
       * @default 0
       */
      annual_bonus_base?: string;
      /** Monthly Bonus Calculated */
      monthly_bonus_calculated?: string | null;
      /** Quarterly Bonus Calculated */
      quarterly_bonus_calculated?: string | null;
      /** Annual Bonus Calculated */
      annual_bonus_calculated?: string | null;
      /** Monthly Bonus Fixed Part */
      monthly_bonus_fixed_part?: string | null;
      /** Quarterly Bonus Fixed Part */
      quarterly_bonus_fixed_part?: string | null;
      /** Annual Bonus Fixed Part */
      annual_bonus_fixed_part?: string | null;
      /** Department Id */
      department_id: number;
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * EmployeeKPIUpdate
     * @description Schema for updating employee KPI
     */
    EmployeeKPIUpdate: {
      /** Employee Id */
      employee_id?: number | null;
      /** Year */
      year?: number | null;
      /** Month */
      month?: number | null;
      /** Kpi Percentage */
      kpi_percentage?: number | string | null;
      monthly_bonus_type?: components["schemas"]["BonusTypeEnum"] | null;
      quarterly_bonus_type?: components["schemas"]["BonusTypeEnum"] | null;
      annual_bonus_type?: components["schemas"]["BonusTypeEnum"] | null;
      /** Monthly Bonus Base */
      monthly_bonus_base?: number | string | null;
      /** Quarterly Bonus Base */
      quarterly_bonus_base?: number | string | null;
      /** Annual Bonus Base */
      annual_bonus_base?: number | string | null;
      /** Monthly Bonus Calculated */
      monthly_bonus_calculated?: number | string | null;
      /** Quarterly Bonus Calculated */
      quarterly_bonus_calculated?: number | string | null;
      /** Annual Bonus Calculated */
      annual_bonus_calculated?: number | string | null;
      /** Monthly Bonus Fixed Part */
      monthly_bonus_fixed_part?: number | string | null;
      /** Quarterly Bonus Fixed Part */
      quarterly_bonus_fixed_part?: number | string | null;
      /** Annual Bonus Fixed Part */
      annual_bonus_fixed_part?: number | string | null;
      /** Department Id */
      department_id?: number | null;
      /** Notes */
      notes?: string | null;
    };
    /**
     * EmployeeKPIWithGoals
     * @description Employee KPI with related goals
     */
    EmployeeKPIWithGoals: {
      /** Employee Id */
      employee_id: number;
      /** Year */
      year: number;
      /** Month */
      month: number;
      /**
       * Kpi Percentage
       * @description КПИ% (0-200)
       */
      kpi_percentage?: string | null;
      /** @default PERFORMANCE_BASED */
      monthly_bonus_type?: components["schemas"]["BonusTypeEnum"];
      /** @default PERFORMANCE_BASED */
      quarterly_bonus_type?: components["schemas"]["BonusTypeEnum"];
      /** @default PERFORMANCE_BASED */
      annual_bonus_type?: components["schemas"]["BonusTypeEnum"];
      /**
       * Monthly Bonus Base
       * @default 0
       */
      monthly_bonus_base?: string;
      /**
       * Quarterly Bonus Base
       * @default 0
       */
      quarterly_bonus_base?: string;
      /**
       * Annual Bonus Base
       * @default 0
       */
      annual_bonus_base?: string;
      /** Monthly Bonus Calculated */
      monthly_bonus_calculated?: string | null;
      /** Quarterly Bonus Calculated */
      quarterly_bonus_calculated?: string | null;
      /** Annual Bonus Calculated */
      annual_bonus_calculated?: string | null;
      /** Monthly Bonus Fixed Part */
      monthly_bonus_fixed_part?: string | null;
      /** Quarterly Bonus Fixed Part */
      quarterly_bonus_fixed_part?: string | null;
      /** Annual Bonus Fixed Part */
      annual_bonus_fixed_part?: string | null;
      /** Department Id */
      department_id: number;
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Goal Achievements
       * @default []
       */
      goal_achievements?: components["schemas"]["EmployeeKPIGoalInDB"][];
    };
    /**
     * EmployeeStatusEnum
     * @description Enum for employee statuses
     * @enum {string}
     */
    EmployeeStatusEnum: "ACTIVE" | "ON_VACATION" | "ON_LEAVE" | "FIRED";
    /**
     * EmployeeUpdate
     * @description Schema for updating employee - department_id cannot be changed via update
     */
    EmployeeUpdate: {
      /** Full Name */
      full_name?: string | null;
      /** Position */
      position?: string | null;
      /** Employee Number */
      employee_number?: string | null;
      /** Hire Date */
      hire_date?: string | null;
      /** Fire Date */
      fire_date?: string | null;
      status?: components["schemas"]["EmployeeStatusEnum"] | null;
      /** Base Salary */
      base_salary?: number | string | null;
      /** Monthly Bonus Base */
      monthly_bonus_base?: number | string | null;
      /** Quarterly Bonus Base */
      quarterly_bonus_base?: number | string | null;
      /** Annual Bonus Base */
      annual_bonus_base?: number | string | null;
      /** Email */
      email?: string | null;
      /** Phone */
      phone?: string | null;
      /** Notes */
      notes?: string | null;
    };
    /**
     * EmployeeWithSalaryHistory
     * @description Employee with salary history
     */
    EmployeeWithSalaryHistory: {
      /** Full Name */
      full_name: string;
      /** Position */
      position: string;
      /** Employee Number */
      employee_number?: string | null;
      /** Hire Date */
      hire_date?: string | null;
      /** Fire Date */
      fire_date?: string | null;
      /** @default ACTIVE */
      status?: components["schemas"]["EmployeeStatusEnum"];
      /** Base Salary */
      base_salary: string;
      /**
       * Monthly Bonus Base
       * @description Базовая месячная премия
       * @default 0
       */
      monthly_bonus_base?: string;
      /**
       * Quarterly Bonus Base
       * @description Базовая квартальная премия (опционально)
       */
      quarterly_bonus_base?: string | null;
      /**
       * Annual Bonus Base
       * @description Базовая годовая премия (опционально)
       */
      annual_bonus_base?: string | null;
      /** Email */
      email?: string | null;
      /** Phone */
      phone?: string | null;
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /** Department Id */
      department_id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Salary History
       * @default []
       */
      salary_history?: components["schemas"]["SalaryHistoryInDB"][];
    };
    /**
     * ExpenseCreate
     * @description Schema for creating expense
     */
    ExpenseCreate: {
      /** Number */
      number: string;
      /** Category Id */
      category_id?: number | null;
      /** Contractor Id */
      contractor_id?: number | null;
      /** Organization Id */
      organization_id: number;
      /** Amount */
      amount: number | string;
      /**
       * Request Date
       * Format: date-time
       */
      request_date: string;
      /** Payment Date */
      payment_date?: string | null;
      /** @default DRAFT */
      status?: components["schemas"]["ExpenseStatusEnum"];
      /**
       * Is Paid
       * @default false
       */
      is_paid?: boolean;
      /**
       * Is Closed
       * @default false
       */
      is_closed?: boolean;
      /** Comment */
      comment?: string | null;
      /** Requester */
      requester?: string | null;
    };
    /**
     * ExpenseInDB
     * @description Schema for expense from database with relationships
     */
    ExpenseInDB: {
      /** Number */
      number: string;
      /** Category Id */
      category_id?: number | null;
      /** Contractor Id */
      contractor_id?: number | null;
      /** Organization Id */
      organization_id: number;
      /** Amount */
      amount: string;
      /**
       * Request Date
       * Format: date-time
       */
      request_date: string;
      /** Payment Date */
      payment_date?: string | null;
      /** @default DRAFT */
      status?: components["schemas"]["ExpenseStatusEnum"];
      /**
       * Is Paid
       * @default false
       */
      is_paid?: boolean;
      /**
       * Is Closed
       * @default false
       */
      is_closed?: boolean;
      /** Comment */
      comment?: string | null;
      /** Requester */
      requester?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      category?: components["schemas"]["BudgetCategoryInDB"] | null;
      contractor?: components["schemas"]["ContractorInDB"] | null;
      organization?: components["schemas"]["OrganizationInDB"] | null;
      /**
       * Attachments
       * @default []
       */
      attachments?: components["schemas"]["AttachmentInDB"][];
    };
    /**
     * ExpenseList
     * @description Schema for expense list with pagination
     */
    ExpenseList: {
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["ExpenseInDB"][];
      /** Page */
      page: number;
      /** Page Size */
      page_size: number;
      /** Pages */
      pages: number;
    };
    /**
     * ExpenseStatusEnum
     * @description Enum for expense statuses
     * @enum {string}
     */
    ExpenseStatusEnum: "DRAFT" | "PENDING" | "PAID" | "REJECTED" | "CLOSED";
    /**
     * ExpenseStatusUpdate
     * @description Schema for updating expense status
     */
    ExpenseStatusUpdate: {
      status: components["schemas"]["ExpenseStatusEnum"];
    };
    /**
     * ExpenseTypeEnum
     * @description Enum for expense types
     * @enum {string}
     */
    ExpenseTypeEnum: "OPEX" | "CAPEX";
    /**
     * ExpenseUpdate
     * @description Schema for updating expense
     */
    ExpenseUpdate: {
      /** Number */
      number?: string | null;
      /** Category Id */
      category_id?: number | null;
      /** Contractor Id */
      contractor_id?: number | null;
      /** Organization Id */
      organization_id?: number | null;
      /** Amount */
      amount?: number | string | null;
      /** Request Date */
      request_date?: string | null;
      /** Payment Date */
      payment_date?: string | null;
      status?: components["schemas"]["ExpenseStatusEnum"] | null;
      /** Is Paid */
      is_paid?: boolean | null;
      /** Is Closed */
      is_closed?: boolean | null;
      /** Comment */
      comment?: string | null;
      /** Requester */
      requester?: string | null;
    };
    /**
     * FTPImportRequest
     * @description Request schema for FTP import
     */
    FTPImportRequest: {
      /** Remote Path */
      remote_path: string;
      /** Delete From Year */
      delete_from_year?: number | null;
      /** Delete From Month */
      delete_from_month?: number | null;
      /**
       * Skip Duplicates
       * @default true
       */
      skip_duplicates?: boolean;
    };
    /** ForecastExpenseCreate */
    ForecastExpenseCreate: {
      /** Department Id */
      department_id: number;
      /** Category Id */
      category_id: number;
      /** Contractor Id */
      contractor_id?: number | null;
      /** Organization Id */
      organization_id: number;
      /**
       * Forecast Date
       * Format: date
       */
      forecast_date: string;
      /** Amount */
      amount: number | string;
      /** Comment */
      comment?: string | null;
      /**
       * Is Regular
       * @default false
       */
      is_regular?: boolean;
      /** Based On Expense Id */
      based_on_expense_id?: number | null;
    };
    /** ForecastExpenseInDB */
    ForecastExpenseInDB: {
      /** Department Id */
      department_id: number;
      /** Category Id */
      category_id: number;
      /** Contractor Id */
      contractor_id?: number | null;
      /** Organization Id */
      organization_id: number;
      /**
       * Forecast Date
       * Format: date
       */
      forecast_date: string;
      /** Amount */
      amount: string;
      /** Comment */
      comment?: string | null;
      /**
       * Is Regular
       * @default false
       */
      is_regular?: boolean;
      /** Based On Expense Id */
      based_on_expense_id?: number | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Category */
      category?: Record<string, never> | null;
      /** Contractor */
      contractor?: Record<string, never> | null;
      /** Organization */
      organization?: Record<string, never> | null;
    };
    /** ForecastExpenseUpdate */
    ForecastExpenseUpdate: {
      /** Category Id */
      category_id?: number | null;
      /** Contractor Id */
      contractor_id?: number | null;
      /** Organization Id */
      organization_id?: number | null;
      /** Forecast Date */
      forecast_date?: string | null;
      /** Amount */
      amount?: number | string | null;
      /** Comment */
      comment?: string | null;
      /** Is Regular */
      is_regular?: boolean | null;
    };
    /**
     * ForecastMethodEnum
     * @enum {string}
     */
    ForecastMethodEnum: "simple_average" | "moving_average" | "seasonal";
    /** ForecastSummary */
    ForecastSummary: {
      period: components["schemas"]["ForecastSummaryPeriod"];
      forecasts: components["schemas"]["ForecastSummaryMethods"];
    };
    /** ForecastSummaryMethodStats */
    ForecastSummaryMethodStats: {
      /** Total */
      total: number;
      /** Daily Avg */
      daily_avg: number;
    };
    /** ForecastSummaryMethods */
    ForecastSummaryMethods: {
      simple_average: components["schemas"]["ForecastSummaryMethodStats"];
      moving_average: components["schemas"]["ForecastSummaryMethodStats"];
      seasonal: components["schemas"]["ForecastSummaryMethodStats"];
    };
    /** ForecastSummaryPeriod */
    ForecastSummaryPeriod: {
      /** Start Date */
      start_date: string;
      /** End Date */
      end_date: string;
    };
    /**
     * GenerateForecastRequest
     * @description Request for generating forecast
     */
    GenerateForecastRequest: {
      /** Target Month */
      target_month: number;
      /** Target Year */
      target_year: number;
      /** Department Id */
      department_id: number;
      /**
       * Include Regular
       * @default true
       */
      include_regular?: boolean;
      /**
       * Include Average
       * @default true
       */
      include_average?: boolean;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * KPIEmployeeSummary
     * @description Summary of employee KPI performance
     */
    KPIEmployeeSummary: {
      /** Employee Id */
      employee_id: number;
      /** Employee Name */
      employee_name: string;
      /** Position */
      position: string;
      /** Year */
      year: number;
      /** Month */
      month?: number | null;
      /** Kpi Percentage */
      kpi_percentage: string | null;
      /** Total Bonus Calculated */
      total_bonus_calculated: string;
      /** Monthly Bonus Calculated */
      monthly_bonus_calculated: string;
      /** Quarterly Bonus Calculated */
      quarterly_bonus_calculated: string;
      /** Annual Bonus Calculated */
      annual_bonus_calculated: string;
      /** Goals Count */
      goals_count: number;
      /** Goals Achieved */
      goals_achieved: number;
    };
    /**
     * KPIGoalCreate
     * @description Schema for creating KPI goal
     */
    KPIGoalCreate: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** Category */
      category?: string | null;
      /** Metric Name */
      metric_name?: string | null;
      /** Metric Unit */
      metric_unit?: string | null;
      /** Target Value */
      target_value?: number | string | null;
      /**
       * Weight
       * @description Вес цели (0-100)
       * @default 100
       */
      weight?: number | string;
      /** Year */
      year: number;
      /**
       * Is Annual
       * @default true
       */
      is_annual?: boolean;
      /** @default DRAFT */
      status?: components["schemas"]["KPIGoalStatusEnum"];
      /** Department Id */
      department_id: number;
    };
    /**
     * KPIGoalInDB
     * @description Schema for KPI goal in database
     */
    KPIGoalInDB: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** Category */
      category?: string | null;
      /** Metric Name */
      metric_name?: string | null;
      /** Metric Unit */
      metric_unit?: string | null;
      /** Target Value */
      target_value?: string | null;
      /**
       * Weight
       * @description Вес цели (0-100)
       * @default 100
       */
      weight?: string;
      /** Year */
      year: number;
      /**
       * Is Annual
       * @default true
       */
      is_annual?: boolean;
      /** @default DRAFT */
      status?: components["schemas"]["KPIGoalStatusEnum"];
      /** Department Id */
      department_id: number;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * KPIGoalStatusEnum
     * @description Enum for KPI goal statuses
     * @enum {string}
     */
    KPIGoalStatusEnum: "DRAFT" | "ACTIVE" | "ACHIEVED" | "NOT_ACHIEVED" | "CANCELLED";
    /**
     * KPIGoalUpdate
     * @description Schema for updating KPI goal
     */
    KPIGoalUpdate: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Category */
      category?: string | null;
      /** Metric Name */
      metric_name?: string | null;
      /** Metric Unit */
      metric_unit?: string | null;
      /** Target Value */
      target_value?: number | string | null;
      /** Weight */
      weight?: number | string | null;
      /** Year */
      year?: number | null;
      /** Is Annual */
      is_annual?: boolean | null;
      status?: components["schemas"]["KPIGoalStatusEnum"] | null;
      /** Department Id */
      department_id?: number | null;
    };
    /**
     * OrganizationCreate
     * @description Schema for creating organization
     */
    OrganizationCreate: {
      /** Name */
      name: string;
      /** Legal Name */
      legal_name?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Department Id */
      department_id?: number | null;
    };
    /**
     * OrganizationInDB
     * @description Schema for organization from database
     */
    OrganizationInDB: {
      /** Name */
      name: string;
      /** Legal Name */
      legal_name?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Id */
      id: number;
      /** Department Id */
      department_id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * OrganizationUpdate
     * @description Schema for updating organization
     */
    OrganizationUpdate: {
      /** Name */
      name?: string | null;
      /** Legal Name */
      legal_name?: string | null;
      /** Is Active */
      is_active?: boolean | null;
    };
    /** PaymentCalendar */
    PaymentCalendar: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Days */
      days: components["schemas"]["PaymentCalendarDay"][];
    };
    /** PaymentCalendarDay */
    PaymentCalendarDay: {
      /**
       * Date
       * Format: date
       */
      date: string;
      /** Total Amount */
      total_amount: number;
      /** Payment Count */
      payment_count: number;
    };
    /** PaymentDetail */
    PaymentDetail: {
      /** Id */
      id: number;
      /** Number */
      number: string;
      /** Amount */
      amount: number;
      /** Payment Date */
      payment_date: string | null;
      /** Category Id */
      category_id: number | null;
      /** Category Name */
      category_name: string | null;
      /** Contractor Id */
      contractor_id: number | null;
      /** Contractor Name */
      contractor_name: string | null;
      /** Organization Id */
      organization_id: number;
      /** Organization Name */
      organization_name: string | null;
      /** Status */
      status: string;
      /** Comment */
      comment: string | null;
    };
    /** PaymentForecast */
    PaymentForecast: {
      period: components["schemas"]["PaymentForecastPeriod"];
      method: components["schemas"]["ForecastMethodEnum"];
      /** Lookback Days */
      lookback_days: number;
      summary: components["schemas"]["PaymentForecastSummary"];
      /** Forecast */
      forecast: components["schemas"]["PaymentForecastPoint"][];
    };
    /** PaymentForecastPeriod */
    PaymentForecastPeriod: {
      /** Start Date */
      start_date: string;
      /** End Date */
      end_date: string;
      /** Days */
      days: number;
    };
    /** PaymentForecastPoint */
    PaymentForecastPoint: {
      /** Date */
      date: string;
      /** Predicted Amount */
      predicted_amount: number;
      /** Confidence */
      confidence: string;
      method: components["schemas"]["ForecastMethodEnum"];
    };
    /** PaymentForecastSummary */
    PaymentForecastSummary: {
      /** Total Predicted */
      total_predicted: number;
      /** Average Daily */
      average_daily: number;
    };
    /** PaymentsByDay */
    PaymentsByDay: {
      /**
       * Date
       * Format: date
       */
      date: string;
      /** Total Count */
      total_count: number;
      /** Total Amount */
      total_amount: number;
      /** Payments */
      payments: components["schemas"]["PaymentDetail"][];
    };
    /**
     * PayrollActualCreate
     * @description Schema for creating payroll actual
     */
    PayrollActualCreate: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Employee Id */
      employee_id: number;
      /** Base Salary Paid */
      base_salary_paid: number | string;
      /**
       * Monthly Bonus Paid
       * @default 0
       */
      monthly_bonus_paid?: number | string;
      /**
       * Quarterly Bonus Paid
       * @default 0
       */
      quarterly_bonus_paid?: number | string;
      /**
       * Annual Bonus Paid
       * @default 0
       */
      annual_bonus_paid?: number | string;
      /**
       * Other Payments Paid
       * @default 0
       */
      other_payments_paid?: number | string;
      /** Payment Date */
      payment_date?: string | null;
      /** Expense Id */
      expense_id?: number | null;
      /** Notes */
      notes?: string | null;
    };
    /**
     * PayrollActualInDB
     * @description Schema for payroll actual in database
     */
    PayrollActualInDB: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Employee Id */
      employee_id: number;
      /** Department Id */
      department_id: number;
      /** Base Salary Paid */
      base_salary_paid: string;
      /**
       * Monthly Bonus Paid
       * @description Месячная премия (факт)
       * @default 0
       */
      monthly_bonus_paid?: string;
      /**
       * Quarterly Bonus Paid
       * @description Квартальная премия (факт)
       * @default 0
       */
      quarterly_bonus_paid?: string;
      /**
       * Annual Bonus Paid
       * @description Годовая премия (факт)
       * @default 0
       */
      annual_bonus_paid?: string;
      /**
       * Other Payments Paid
       * @default 0
       */
      other_payments_paid?: string;
      /** Total Paid */
      total_paid: string;
      /** Payment Date */
      payment_date?: string | null;
      /** Expense Id */
      expense_id?: number | null;
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * PayrollActualUpdate
     * @description Schema for updating payroll actual
     */
    PayrollActualUpdate: {
      /** Base Salary Paid */
      base_salary_paid?: number | string | null;
      /** Monthly Bonus Paid */
      monthly_bonus_paid?: number | string | null;
      /** Quarterly Bonus Paid */
      quarterly_bonus_paid?: number | string | null;
      /** Annual Bonus Paid */
      annual_bonus_paid?: number | string | null;
      /** Other Payments Paid */
      other_payments_paid?: number | string | null;
      /** Payment Date */
      payment_date?: string | null;
      /** Expense Id */
      expense_id?: number | null;
      /** Notes */
      notes?: string | null;
    };
    /**
     * PayrollActualWithEmployee
     * @description Payroll actual with employee details
     */
    PayrollActualWithEmployee: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Employee Id */
      employee_id: number;
      /** Department Id */
      department_id: number;
      /** Base Salary Paid */
      base_salary_paid: string;
      /**
       * Monthly Bonus Paid
       * @description Месячная премия (факт)
       * @default 0
       */
      monthly_bonus_paid?: string;
      /**
       * Quarterly Bonus Paid
       * @description Квартальная премия (факт)
       * @default 0
       */
      quarterly_bonus_paid?: string;
      /**
       * Annual Bonus Paid
       * @description Годовая премия (факт)
       * @default 0
       */
      annual_bonus_paid?: string;
      /**
       * Other Payments Paid
       * @default 0
       */
      other_payments_paid?: string;
      /** Total Paid */
      total_paid: string;
      /** Payment Date */
      payment_date?: string | null;
      /** Expense Id */
      expense_id?: number | null;
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      employee: components["schemas"]["EmployeeInDB"];
    };
    /**
     * PayrollDynamics
     * @description Payroll dynamics over time
     */
    PayrollDynamics: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Planned Base Salary */
      planned_base_salary: string;
      /**
       * Planned Monthly Bonus
       * @default 0
       */
      planned_monthly_bonus?: string;
      /**
       * Planned Quarterly Bonus
       * @default 0
       */
      planned_quarterly_bonus?: string;
      /**
       * Planned Annual Bonus
       * @default 0
       */
      planned_annual_bonus?: string;
      /** Planned Bonus */
      planned_bonus: string;
      /** Planned Other */
      planned_other: string;
      /** Planned Total */
      planned_total: string;
      /** Actual Base Salary */
      actual_base_salary: string;
      /**
       * Actual Monthly Bonus
       * @default 0
       */
      actual_monthly_bonus?: string;
      /**
       * Actual Quarterly Bonus
       * @default 0
       */
      actual_quarterly_bonus?: string;
      /**
       * Actual Annual Bonus
       * @default 0
       */
      actual_annual_bonus?: string;
      /** Actual Bonus */
      actual_bonus: string;
      /** Actual Other */
      actual_other: string;
      /** Actual Total */
      actual_total: string;
      /** Employee Count */
      employee_count: number;
    };
    /**
     * PayrollForecast
     * @description Payroll forecast for future months
     */
    PayrollForecast: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Forecasted Total */
      forecasted_total: string;
      /** Forecasted Base Salary */
      forecasted_base_salary: string;
      /**
       * Forecasted Monthly Bonus
       * @default 0
       */
      forecasted_monthly_bonus?: string;
      /**
       * Forecasted Quarterly Bonus
       * @default 0
       */
      forecasted_quarterly_bonus?: string;
      /**
       * Forecasted Annual Bonus
       * @default 0
       */
      forecasted_annual_bonus?: string;
      /** Forecasted Bonus */
      forecasted_bonus: string;
      /** Forecasted Other */
      forecasted_other: string;
      /** Employee Count */
      employee_count: number;
      /** Confidence */
      confidence: string;
      /** Based On Months */
      based_on_months: number;
    };
    /**
     * PayrollPlanCreate
     * @description Schema for creating payroll plan
     */
    PayrollPlanCreate: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Employee Id */
      employee_id: number;
      /** Base Salary */
      base_salary: number | string;
      /**
       * Monthly Bonus
       * @default 0
       */
      monthly_bonus?: number | string;
      /**
       * Quarterly Bonus
       * @default 0
       */
      quarterly_bonus?: number | string;
      /**
       * Annual Bonus
       * @default 0
       */
      annual_bonus?: number | string;
      /**
       * Other Payments
       * @default 0
       */
      other_payments?: number | string;
      /** Notes */
      notes?: string | null;
    };
    /**
     * PayrollPlanInDB
     * @description Schema for payroll plan in database
     */
    PayrollPlanInDB: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Employee Id */
      employee_id: number;
      /** Department Id */
      department_id: number;
      /** Base Salary */
      base_salary: string;
      /**
       * Monthly Bonus
       * @description Месячная премия
       * @default 0
       */
      monthly_bonus?: string;
      /**
       * Quarterly Bonus
       * @description Квартальная премия
       * @default 0
       */
      quarterly_bonus?: string;
      /**
       * Annual Bonus
       * @description Годовая премия
       * @default 0
       */
      annual_bonus?: string;
      /**
       * Other Payments
       * @default 0
       */
      other_payments?: string;
      /** Total Planned */
      total_planned: string;
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * PayrollPlanUpdate
     * @description Schema for updating payroll plan
     */
    PayrollPlanUpdate: {
      /** Base Salary */
      base_salary?: number | string | null;
      /** Monthly Bonus */
      monthly_bonus?: number | string | null;
      /** Quarterly Bonus */
      quarterly_bonus?: number | string | null;
      /** Annual Bonus */
      annual_bonus?: number | string | null;
      /** Other Payments */
      other_payments?: number | string | null;
      /** Notes */
      notes?: string | null;
    };
    /**
     * PayrollPlanWithEmployee
     * @description Payroll plan with employee details
     */
    PayrollPlanWithEmployee: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Employee Id */
      employee_id: number;
      /** Department Id */
      department_id: number;
      /** Base Salary */
      base_salary: string;
      /**
       * Monthly Bonus
       * @description Месячная премия
       * @default 0
       */
      monthly_bonus?: string;
      /**
       * Quarterly Bonus
       * @description Квартальная премия
       * @default 0
       */
      quarterly_bonus?: string;
      /**
       * Annual Bonus
       * @description Годовая премия
       * @default 0
       */
      annual_bonus?: string;
      /**
       * Other Payments
       * @default 0
       */
      other_payments?: string;
      /** Total Planned */
      total_planned: string;
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      employee: components["schemas"]["EmployeeInDB"];
    };
    /**
     * PayrollStructureMonth
     * @description Payroll structure breakdown for a single month
     */
    PayrollStructureMonth: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Total Base Salary */
      total_base_salary: string;
      /**
       * Total Monthly Bonus
       * @description Месячные премии
       * @default 0
       */
      total_monthly_bonus?: string;
      /**
       * Total Quarterly Bonus
       * @description Квартальные премии
       * @default 0
       */
      total_quarterly_bonus?: string;
      /**
       * Total Annual Bonus
       * @description Годовые премии
       * @default 0
       */
      total_annual_bonus?: string;
      /**
       * Total Bonus
       * @description Всего премий (сумма всех типов)
       * @default 0
       */
      total_bonus?: string;
      /** Total Other Payments */
      total_other_payments: string;
      /** Total Amount */
      total_amount: string;
      /** Employee Count */
      employee_count: number;
    };
    /**
     * PayrollSummary
     * @description Payroll summary for analytics
     */
    PayrollSummary: {
      /** Year */
      year: number;
      /** Month */
      month: number;
      /** Total Employees */
      total_employees: number;
      /** Total Planned */
      total_planned: string;
      /** Total Paid */
      total_paid: string;
      /** Variance */
      variance: string;
      /** Variance Percent */
      variance_percent: number;
    };
    /**
     * SalaryHistoryCreate
     * @description Schema for creating salary history
     */
    SalaryHistoryCreate: {
      /** Employee Id */
      employee_id: number;
      /** Old Salary */
      old_salary?: number | string | null;
      /** New Salary */
      new_salary: number | string;
      /**
       * Effective Date
       * Format: date
       */
      effective_date: string;
      /** Reason */
      reason?: string | null;
      /** Notes */
      notes?: string | null;
    };
    /**
     * SalaryHistoryInDB
     * @description Schema for salary history in database
     */
    SalaryHistoryInDB: {
      /** Employee Id */
      employee_id: number;
      /** Old Salary */
      old_salary?: string | null;
      /** New Salary */
      new_salary: string;
      /**
       * Effective Date
       * Format: date
       */
      effective_date: string;
      /** Reason */
      reason?: string | null;
      /** Notes */
      notes?: string | null;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /**
     * SalaryStatistics
     * @description Salary distribution statistics
     */
    SalaryStatistics: {
      /** Total Employees */
      total_employees: number;
      /** Active Employees */
      active_employees: number;
      /** Min Salary */
      min_salary: string;
      /** Max Salary */
      max_salary: string;
      /** Average Salary */
      average_salary: string;
      /** Median Salary */
      median_salary: string;
      /** Percentile 25 */
      percentile_25: string;
      /** Percentile 75 */
      percentile_75: string;
      /** Percentile 90 */
      percentile_90: string;
      /** Total Payroll */
      total_payroll: string;
    };
    /** TrendItem */
    TrendItem: {
      /** Month */
      month: number;
      /** Month Name */
      month_name: string;
      /** Amount */
      amount: number;
      /** Count */
      count: number;
    };
    /** Trends */
    Trends: {
      /** Year */
      year: number;
      /** Category Id */
      category_id?: number | null;
      /** Trends */
      trends: components["schemas"]["TrendItem"][];
    };
    /**
     * User
     * @description Schema for user response (without password)
     */
    User: {
      /** Username */
      username: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Full Name */
      full_name?: string | null;
      /** Department Id */
      department_id?: number | null;
      /** Position */
      position?: string | null;
      /** Phone */
      phone?: string | null;
      /** Id */
      id: number;
      role: components["schemas"]["UserRoleEnum"];
      /** Is Active */
      is_active: boolean;
      /** Is Verified */
      is_verified: boolean;
      /** Last Login */
      last_login?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * UserCreate
     * @description Schema for user registration
     */
    UserCreate: {
      /** Username */
      username: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Full Name */
      full_name?: string | null;
      /** Department Id */
      department_id?: number | null;
      /** Position */
      position?: string | null;
      /** Phone */
      phone?: string | null;
      /** Password */
      password: string;
      /** @default USER */
      role?: components["schemas"]["UserRoleEnum"];
    };
    /**
     * UserListItem
     * @description Schema for user in list view
     */
    UserListItem: {
      /** Id */
      id: number;
      /** Username */
      username: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Full Name */
      full_name?: string | null;
      role: components["schemas"]["UserRoleEnum"];
      /** Is Active */
      is_active: boolean;
      /** Department Id */
      department_id?: number | null;
      /** Position */
      position?: string | null;
      /** Last Login */
      last_login?: string | null;
    };
    /**
     * UserLogin
     * @description Schema for user login
     */
    UserLogin: {
      /** Username */
      username: string;
      /** Password */
      password: string;
    };
    /**
     * UserLoginResponse
     * @description Schema for login response
     */
    UserLoginResponse: {
      /** Access Token */
      access_token: string;
      /**
       * Token Type
       * @default bearer
       */
      token_type?: string;
      user: components["schemas"]["User"];
    };
    /**
     * UserPasswordChange
     * @description Schema for changing user password
     */
    UserPasswordChange: {
      /** Old Password */
      old_password: string;
      /** New Password */
      new_password: string;
    };
    /**
     * UserRoleEnum
     * @description Enum for user roles in BDR (Budget Department Reporting)
     * @enum {string}
     */
    UserRoleEnum: "ADMIN" | "MANAGER" | "USER";
    /**
     * UserUpdate
     * @description Schema for updating user information
     */
    UserUpdate: {
      /** Email */
      email?: string | null;
      /** Full Name */
      full_name?: string | null;
      /** Department Id */
      department_id?: number | null;
      /** Position */
      position?: string | null;
      /** Phone */
      phone?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      role?: components["schemas"]["UserRoleEnum"] | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * VersionComparisonResult
     * @description Result of comparing two versions
     */
    VersionComparisonResult: {
      /** Category */
      category: string;
      /** V1 Amount */
      v1_amount: string;
      /** V2 Amount */
      v2_amount: string;
      /** Difference */
      difference: string;
      /** Difference Percent */
      difference_percent: string;
    };
    /**
     * BulkDeleteRequest
     * @description Request for bulk delete operations
     */
    app__api__v1__categories__BulkDeleteRequest: {
      /** Ids */
      ids: number[];
    };
    /**
     * BulkUpdateRequest
     * @description Request for bulk update operations
     */
    app__api__v1__categories__BulkUpdateRequest: {
      /** Ids */
      ids: number[];
      /** Is Active */
      is_active?: boolean;
    };
    /** BulkDeleteRequest */
    app__api__v1__contractors__BulkDeleteRequest: {
      /** Ids */
      ids: number[];
    };
    /** BulkUpdateRequest */
    app__api__v1__contractors__BulkUpdateRequest: {
      /** Ids */
      ids: number[];
      /** Is Active */
      is_active: boolean;
    };
    /** BulkDeleteRequest */
    app__api__v1__organizations__BulkDeleteRequest: {
      /** Ids */
      ids: number[];
    };
    /** BulkUpdateRequest */
    app__api__v1__organizations__BulkUpdateRequest: {
      /** Ids */
      ids: number[];
      /** Is Active */
      is_active: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Register
   * @description Register a new user
   *
   * - **username**: Unique username (3-100 characters)
   * - **email**: Valid email address
   * - **password**: Password (min 6 characters, must contain letter and digit)
   * - **role**: User role (ADMIN, MANAGER, USER)
   */
  register_api_v1_auth_register_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Login
   * @description Login with username/email and password
   *
   * Returns JWT access token and user information
   */
  login_api_v1_auth_login_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLogin"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserLoginResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Current User Info
   * @description Get current user information
   *
   * Requires authentication
   */
  get_current_user_info_api_v1_auth_me_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /**
   * Update Current User
   * @description Update current user information
   *
   * Users can only update their own profile (except admins)
   */
  update_current_user_api_v1_auth_me_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Change Password
   * @description Change current user password
   */
  change_password_api_v1_auth_me_change_password_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPasswordChange"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Users
   * @description List all users (Admin only)
   */
  list_users_api_v1_auth_users_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserListItem"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get User
   * @description Get user by ID (Admin only or own profile)
   */
  get_user_api_v1_auth_users__user_id__get: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update User
   * @description Update user by ID (Admin only)
   */
  update_user_api_v1_auth_users__user_id__put: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User
   * @description Delete user by ID (Admin only)
   *
   * Note: This is a hard delete. Consider using deactivation instead.
   */
  delete_user_api_v1_auth_users__user_id__delete: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Departments
   * @description List all departments
   *
   * - **ADMIN**: Can see all departments
   * - **MANAGER**: Can see all departments
   * - **USER**: Can only see their own department
   */
  list_departments_api_v1_departments__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        is_active?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DepartmentListItem"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Department
   * @description Create a new department (ADMIN only)
   *
   * - **name**: Department name (unique, 2-255 characters)
   * - **code**: Department code (unique, 2-50 characters)
   * - **description**: Optional description
   * - **manager_name**: Optional manager name
   * - **contact_email**: Optional contact email
   * - **contact_phone**: Optional contact phone
   * - **is_active**: Active status (default: true)
   */
  create_department_api_v1_departments__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepartmentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Department"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Department
   * @description Get department by ID
   *
   * - **ADMIN/MANAGER**: Can view any department
   * - **USER**: Can only view their own department
   */
  get_department_api_v1_departments__department_id__get: {
    parameters: {
      path: {
        department_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Department"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Department
   * @description Update department by ID (ADMIN only)
   */
  update_department_api_v1_departments__department_id__put: {
    parameters: {
      path: {
        department_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepartmentUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Department"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Deactivate Department
   * @description Deactivate department by ID (ADMIN only)
   *
   * Note: This is a soft delete (sets is_active = false).
   * Department data is preserved for historical reporting.
   */
  deactivate_department_api_v1_departments__department_id__delete: {
    parameters: {
      path: {
        department_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Department Stats
   * @description Get department with statistics
   *
   * Returns department info with:
   * - users_count: Number of users in department
   * - expenses_count: Number of expenses
   * - total_budget: Sum of all budget plans
   *
   * - **ADMIN/MANAGER**: Can view any department stats
   * - **USER**: Can only view their own department stats
   */
  get_department_stats_api_v1_departments__department_id__stats_get: {
    parameters: {
      path: {
        department_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DepartmentWithStats"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Activate Department
   * @description Reactivate a deactivated department (ADMIN only)
   */
  activate_department_api_v1_departments__department_id__activate_post: {
    parameters: {
      path: {
        department_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Department"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Audit Logs
   * @description Get audit logs
   *
   * - **ADMIN**: Can view all audit logs
   * - **MANAGER**: Can view audit logs for all departments
   * - **USER**: Can only view audit logs for their department
   */
  get_audit_logs_api_v1_audit__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        action?: components["schemas"]["AuditActionEnum"] | null;
        entity_type?: string | null;
        entity_id?: number | null;
        user_id?: number | null;
        /** @description Filter by department */
        department_id?: number | null;
        /** @description Search in description */
        search?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuditLogWithUser"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Audit Log
   * @description Get audit log by ID
   */
  get_audit_log_api_v1_audit__audit_log_id__get: {
    parameters: {
      path: {
        audit_log_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuditLogWithUser"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Entity Audit Logs
   * @description Get all audit logs for a specific entity
   *
   * Useful for viewing history of changes to a particular record
   */
  get_entity_audit_logs_api_v1_audit_entity__entity_type___entity_id__get: {
    parameters: {
      path: {
        entity_type: string;
        entity_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuditLogWithUser"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Expenses To Excel
   * @description Export expenses to Excel file
   *
   * - **USER**: Can only export expenses from their own department
   * - **MANAGER**: Can export expenses from all departments
   * - **ADMIN**: Can export expenses from all departments
   */
  export_expenses_to_excel_api_v1_expenses_export_get: {
    parameters: {
      query?: {
        status?: components["schemas"]["ExpenseStatusEnum"] | null;
        category_id?: number | null;
        contractor_id?: number | null;
        organization_id?: number | null;
        /** @description Filter by department (ADMIN/MANAGER only) */
        department_id?: number | null;
        date_from?: string | null;
        date_to?: string | null;
        search?: string | null;
        year?: number | null;
        month?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Expenses
   * @description Get all expenses with filters and pagination
   *
   * - **USER**: Can only see expenses from their own department
   * - **MANAGER**: Can see expenses from all departments
   * - **ADMIN**: Can see expenses from all departments
   */
  get_expenses_api_v1_expenses__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        status?: components["schemas"]["ExpenseStatusEnum"] | null;
        category_id?: number | null;
        contractor_id?: number | null;
        organization_id?: number | null;
        /** @description Filter by department (ADMIN/MANAGER only) */
        department_id?: number | null;
        date_from?: string | null;
        date_to?: string | null;
        search?: string | null;
        needs_review?: boolean | null;
        imported_from_ftp?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Expense
   * @description Create new expense
   *
   * Auto-assigns to user's department (or can be specified by ADMIN/MANAGER)
   */
  create_expense_api_v1_expenses__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExpenseCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ExpenseInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Expense
   * @description Get expense by ID
   */
  get_expense_api_v1_expenses__expense_id__get: {
    parameters: {
      path: {
        expense_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Expense
   * @description Update expense
   */
  update_expense_api_v1_expenses__expense_id__put: {
    parameters: {
      path: {
        expense_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExpenseUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Expense
   * @description Delete expense
   */
  delete_expense_api_v1_expenses__expense_id__delete: {
    parameters: {
      path: {
        expense_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Expense Status
   * @description Update expense status
   */
  update_expense_status_api_v1_expenses__expense_id__status_patch: {
    parameters: {
      path: {
        expense_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExpenseStatusUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Mark Expense Reviewed
   * @description Mark expense as reviewed (снимает пометку 'needs_review')
   */
  mark_expense_reviewed_api_v1_expenses__expense_id__mark_reviewed_patch: {
    parameters: {
      path: {
        expense_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Bulk Delete Expenses
   * @description Bulk delete expenses by IDs (ADMIN only)
   *
   * Returns the number of deleted expenses
   */
  bulk_delete_expenses_api_v1_expenses_bulk_delete_post: {
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Expense Totals
   * @description Get expense totals with filters
   */
  get_expense_totals_api_v1_expenses_stats_totals_get: {
    parameters: {
      query?: {
        year?: number | null;
        month?: number | null;
        category_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Import Expenses From Ftp
   * @description Import expenses from FTP server
   *
   * This endpoint will:
   * 1. Download Excel file from FTP
   * 2. Delete expenses from specified month onwards (default: July 2025)
   * 3. Import new expenses from the file
   * 4. Skip duplicates based on expense number
   */
  import_expenses_from_ftp_api_v1_expenses_import_ftp_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FTPImportRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Categories
   * @description Get all budget categories
   *
   * - **USER**: Can only see categories from their own department
   * - **MANAGER**: Can see categories from all departments
   * - **ADMIN**: Can see categories from all departments
   */
  get_categories_api_v1_categories__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        is_active?: boolean | null;
        /** @description Filter by department (ADMIN/MANAGER only) */
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetCategoryInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Category
   * @description Create new budget category
   *
   * Auto-assigns to user's department (or can be specified by ADMIN)
   */
  create_category_api_v1_categories__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetCategoryCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["BudgetCategoryInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Category
   * @description Get category by ID
   */
  get_category_api_v1_categories__category_id__get: {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetCategoryInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Category
   * @description Update budget category
   */
  update_category_api_v1_categories__category_id__put: {
    parameters: {
      path: {
        category_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetCategoryUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetCategoryInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Category
   * @description Delete budget category (soft delete - mark as inactive)
   */
  delete_category_api_v1_categories__category_id__delete: {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Bulk Update Categories
   * @description Bulk update categories (activate/deactivate)
   */
  bulk_update_categories_api_v1_categories_bulk_update_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["app__api__v1__categories__BulkUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Bulk Delete Categories
   * @description Bulk delete categories (soft delete - mark as inactive)
   */
  bulk_delete_categories_api_v1_categories_bulk_delete_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["app__api__v1__categories__BulkDeleteRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Categories
   * @description Export all categories to Excel
   */
  export_categories_api_v1_categories_export_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Import Categories
   * @description Import categories from Excel file
   *
   * All imported categories are assigned to the user's department
   */
  import_categories_api_v1_categories_import_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_import_categories_api_v1_categories_import_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Contractors
   * @description Get all contractors
   *
   * - **USER**: Can only see contractors from their own department
   * - **MANAGER**: Can see contractors from all departments
   * - **ADMIN**: Can see contractors from all departments
   */
  get_contractors_api_v1_contractors__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        is_active?: boolean | null;
        search?: string | null;
        /** @description Filter by department (ADMIN/MANAGER only) */
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContractorInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Contractor
   * @description Create new contractor
   *
   * Auto-assigns to user's department (or can be specified by ADMIN)
   */
  create_contractor_api_v1_contractors__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractorCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ContractorInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Contractor
   * @description Get contractor by ID
   */
  get_contractor_api_v1_contractors__contractor_id__get: {
    parameters: {
      path: {
        contractor_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContractorInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Contractor
   * @description Update contractor
   */
  update_contractor_api_v1_contractors__contractor_id__put: {
    parameters: {
      path: {
        contractor_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractorUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContractorInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Contractor
   * @description Delete contractor (permanently remove from database)
   */
  delete_contractor_api_v1_contractors__contractor_id__delete: {
    parameters: {
      path: {
        contractor_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Bulk Update Contractors
   * @description Bulk activate/deactivate contractors
   */
  bulk_update_contractors_api_v1_contractors_bulk_update_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["app__api__v1__contractors__BulkUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Bulk Delete Contractors
   * @description Bulk delete contractors (permanently remove from database)
   */
  bulk_delete_contractors_api_v1_contractors_bulk_delete_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["app__api__v1__contractors__BulkDeleteRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Contractors
   * @description Export contractors to Excel
   */
  export_contractors_api_v1_contractors_export_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Import Contractors
   * @description Import contractors from Excel
   *
   * All imported contractors are assigned to the user's department
   */
  import_contractors_api_v1_contractors_import_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_import_contractors_api_v1_contractors_import_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Organizations
   * @description Get all organizations
   *
   * - **USER**: Can only see organizations from their own department
   * - **MANAGER**: Can see organizations from all departments
   * - **ADMIN**: Can see organizations from all departments
   */
  get_organizations_api_v1_organizations__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        is_active?: boolean | null;
        /** @description Filter by department (ADMIN/MANAGER only) */
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Organization
   * @description Create new organization
   *
   * Auto-assigns to user's department (or can be specified by ADMIN)
   */
  create_organization_api_v1_organizations__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Organization
   * @description Get organization by ID
   */
  get_organization_api_v1_organizations__organization_id__get: {
    parameters: {
      path: {
        organization_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Organization
   * @description Update organization
   */
  update_organization_api_v1_organizations__organization_id__put: {
    parameters: {
      path: {
        organization_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Organization
   * @description Delete organization (permanently remove from database)
   */
  delete_organization_api_v1_organizations__organization_id__delete: {
    parameters: {
      path: {
        organization_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Bulk Update Organizations
   * @description Bulk activate/deactivate organizations
   */
  bulk_update_organizations_api_v1_organizations_bulk_update_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["app__api__v1__organizations__BulkUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Bulk Delete Organizations
   * @description Bulk delete organizations (permanently remove from database)
   */
  bulk_delete_organizations_api_v1_organizations_bulk_delete_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["app__api__v1__organizations__BulkDeleteRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Organizations
   * @description Export organizations to Excel
   */
  export_organizations_api_v1_organizations_export_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Import Organizations
   * @description Import organizations from Excel
   *
   * All imported organizations are assigned to the user's department
   */
  import_organizations_api_v1_organizations_import_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_import_organizations_api_v1_organizations_import_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Budget Plans
   * @description Get budget plans
   */
  get_budget_plans_api_v1_budget_plans_get: {
    parameters: {
      query?: {
        year?: number | null;
        month?: number | null;
        category_id?: number | null;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetPlanInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Budget Plan
   * @description Create new budget plan
   */
  create_budget_plan_api_v1_budget_plans_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetPlanCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["BudgetPlanInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Budget Plan
   * @description Get budget plan by ID
   */
  get_budget_plan_api_v1_budget_plans__plan_id__get: {
    parameters: {
      path: {
        plan_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetPlanInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Budget Plan
   * @description Update budget plan
   */
  update_budget_plan_api_v1_budget_plans__plan_id__put: {
    parameters: {
      path: {
        plan_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetPlanUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetPlanInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Budget Plan
   * @description Delete budget plan
   */
  delete_budget_plan_api_v1_budget_plans__plan_id__delete: {
    parameters: {
      path: {
        plan_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Budget Summary
   * @description Get budget summary (plan vs actual)
   */
  get_budget_summary_api_v1_budget_summary_get: {
    parameters: {
      query: {
        year: number;
        month?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Budget Plan For Year
   * @description Get budget plan for entire year in pivot format (categories x months)
   */
  get_budget_plan_for_year_api_v1_budget_plans_year__year__get: {
    parameters: {
      query?: {
        department_id?: number | null;
      };
      path: {
        year: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Initialize Budget Plan
   * @description Initialize budget plan for the year (create empty entries for all categories and months)
   */
  initialize_budget_plan_api_v1_budget_plans_year__year__init_post: {
    parameters: {
      path: {
        year: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Copy Budget Plan
   * @description Copy budget plan from source year to target year with optional coefficient
   */
  copy_budget_plan_api_v1_budget_plans_year__year__copy_from__source_year__post: {
    parameters: {
      path: {
        year: number;
        source_year: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CopyPlanRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Budget Cell
   * @description Update a single budget plan cell (upsert)
   */
  update_budget_cell_api_v1_budget_plans_cell_patch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CellUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Budget Overview
   * @description Get budget overview (plan vs actual) for specific month
   */
  get_budget_overview_api_v1_budget_overview__year___month__get: {
    parameters: {
      query?: {
        department_id?: number | null;
      };
      path: {
        year: number;
        month: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Budget Plan To Excel
   * @description Export budget plan for year to Excel file
   */
  export_budget_plan_to_excel_api_v1_budget_plans_year__year__export_get: {
    parameters: {
      path: {
        year: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Budget Overview To Excel
   * @description Export budget overview for specific month to Excel file
   */
  export_budget_overview_to_excel_api_v1_budget_overview__year___month__export_get: {
    parameters: {
      query?: {
        department_id?: number | null;
      };
      path: {
        year: number;
        month: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Scenarios
   * @description Get budget scenarios
   */
  get_scenarios_api_v1_budget_planning_scenarios_get: {
    parameters: {
      query?: {
        /** @description Filter by year */
        year?: number | null;
        /** @description Filter by scenario type */
        scenario_type?: components["schemas"]["BudgetScenarioTypeEnum"] | null;
        /** @description Filter by active status */
        is_active?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetScenarioInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Scenario
   * @description Create a new budget scenario
   */
  create_scenario_api_v1_budget_planning_scenarios_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetScenarioCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["BudgetScenarioInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Scenario
   * @description Get a specific scenario by ID
   */
  get_scenario_api_v1_budget_planning_scenarios__scenario_id__get: {
    parameters: {
      path: {
        scenario_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetScenarioInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Scenario
   * @description Update a scenario
   */
  update_scenario_api_v1_budget_planning_scenarios__scenario_id__put: {
    parameters: {
      path: {
        scenario_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetScenarioUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetScenarioInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Scenario
   * @description Delete a scenario
   */
  delete_scenario_api_v1_budget_planning_scenarios__scenario_id__delete: {
    parameters: {
      path: {
        scenario_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Versions
   * @description Get budget versions
   */
  get_versions_api_v1_budget_planning_versions_get: {
    parameters: {
      query?: {
        /** @description Filter by year */
        year?: number | null;
        /** @description Filter by status */
        status?: components["schemas"]["BudgetVersionStatusEnum"] | null;
        /** @description Filter by scenario */
        scenario_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetVersionInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Version
   * @description Create a new budget version
   */
  create_version_api_v1_budget_planning_versions_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetVersionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["BudgetVersionInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Version
   * @description Get a specific version with optional details
   */
  get_version_api_v1_budget_planning_versions__version_id__get: {
    parameters: {
      query?: {
        /** @description Include plan details */
        include_details?: boolean;
        /** @description Include approval logs */
        include_approval_logs?: boolean;
      };
      path: {
        version_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetVersionWithDetails"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Version
   * @description Update a version
   */
  update_version_api_v1_budget_planning_versions__version_id__put: {
    parameters: {
      path: {
        version_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetVersionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetVersionInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Version
   * @description Delete a version (and all its details via cascade)
   */
  delete_version_api_v1_budget_planning_versions__version_id__delete: {
    parameters: {
      path: {
        version_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Plan Details
   * @description Get budget plan details with optional filters
   */
  get_plan_details_api_v1_budget_planning_plan_details_get: {
    parameters: {
      query?: {
        /** @description Filter by version ID */
        version_id?: number | null;
        /** @description Filter by category ID */
        category_id?: number | null;
        /** @description Filter by month */
        month?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetPlanDetailInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Plan Detail
   * @description Create a new plan detail
   */
  create_plan_detail_api_v1_budget_planning_plan_details_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetPlanDetailCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["BudgetPlanDetailInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Plan Detail
   * @description Get a specific plan detail by ID
   */
  get_plan_detail_api_v1_budget_planning_plan_details__detail_id__get: {
    parameters: {
      path: {
        detail_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetPlanDetailInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Plan Detail
   * @description Update a plan detail
   */
  update_plan_detail_api_v1_budget_planning_plan_details__detail_id__put: {
    parameters: {
      path: {
        detail_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetPlanDetailUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetPlanDetailInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Plan Detail
   * @description Delete a plan detail
   */
  delete_plan_detail_api_v1_budget_planning_plan_details__detail_id__delete: {
    parameters: {
      path: {
        detail_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Submit Version
   * @description Submit version for approval (DRAFT -> IN_REVIEW)
   */
  submit_version_api_v1_budget_planning_versions__version_id__submit_post: {
    parameters: {
      path: {
        version_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetVersionInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Approve Version
   * @description Approve a submitted version (IN_REVIEW|REVISION_REQUESTED -> APPROVED)
   */
  approve_version_api_v1_budget_planning_versions__version_id__approve_post: {
    parameters: {
      query?: {
        comments?: string | null;
      };
      path: {
        version_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetVersionInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Reject Version
   * @description Reject a submitted version (IN_REVIEW|REVISION_REQUESTED -> REJECTED)
   */
  reject_version_api_v1_budget_planning_versions__version_id__reject_post: {
    parameters: {
      query: {
        comments: string;
      };
      path: {
        version_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetVersionInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Request Changes
   * @description Request changes to a submitted version (IN_REVIEW -> REVISION_REQUESTED)
   */
  request_changes_api_v1_budget_planning_versions__version_id__request_changes_post: {
    parameters: {
      query: {
        comments: string;
      };
      path: {
        version_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetVersionInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Compare Versions
   * @description Compare two budget versions
   */
  compare_versions_api_v1_budget_planning_versions_compare_get: {
    parameters: {
      query: {
        /** @description First version ID */
        v1: number;
        /** @description Second version ID */
        v2: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VersionComparisonResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Baseline
   * @description Get baseline data for a category from a specific year
   */
  get_baseline_api_v1_budget_planning_baseline__category_id__get: {
    parameters: {
      query: {
        /** @description Base year for calculation (e.g., 2025) */
        year: number;
      };
      path: {
        category_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BaselineSummary"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Calculate By Average
   * @description Calculate budget using average method
   */
  calculate_by_average_api_v1_budget_planning_calculate_average_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CalculateByAverageRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CalculationResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Calculate By Growth
   * @description Calculate budget using growth method
   */
  calculate_by_growth_api_v1_budget_planning_calculate_growth_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CalculateByGrowthRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CalculationResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Calculate By Driver
   * @description Calculate budget using driver-based method
   */
  calculate_by_driver_api_v1_budget_planning_calculate_driver_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CalculateByDriverRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CalculationResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Dashboard Data
   * @description Get dashboard data with key metrics
   */
  get_dashboard_data_api_v1_analytics_dashboard_get: {
    parameters: {
      query?: {
        year?: number | null;
        month?: number | null;
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardData"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Budget Execution
   * @description Get monthly budget execution for the year
   */
  get_budget_execution_api_v1_analytics_budget_execution_get: {
    parameters: {
      query: {
        year: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Analytics By Category
   * @description Get detailed analytics by category
   */
  get_analytics_by_category_api_v1_analytics_by_category_get: {
    parameters: {
      query: {
        year: number;
        month?: number | null;
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryAnalytics"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Trends
   * @description Get spending trends over time
   */
  get_trends_api_v1_analytics_trends_get: {
    parameters: {
      query: {
        year: number;
        category_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Trends"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Payment Calendar
   * @description Get payment calendar view for a specific month
   * Returns daily aggregated payment data
   */
  get_payment_calendar_api_v1_analytics_payment_calendar_get: {
    parameters: {
      query?: {
        /** @description Year for calendar */
        year?: number;
        /** @description Month (1-12) */
        month?: number;
        /** @description Filter by department */
        department_id?: number | null;
        /** @description Filter by category */
        category_id?: number | null;
        /** @description Filter by organization */
        organization_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentCalendar"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Payments By Day
   * @description Get all payments for a specific day
   * Returns detailed list of expenses
   */
  get_payments_by_day_api_v1_analytics_payment_calendar__date__get: {
    parameters: {
      query?: {
        /** @description Filter by department */
        department_id?: number | null;
        /** @description Filter by category */
        category_id?: number | null;
        /** @description Filter by organization */
        organization_id?: number | null;
      };
      path: {
        /** @description Date in ISO format (YYYY-MM-DD) */
        date: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentsByDay"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Payment Forecast
   * @description Generate payment forecast for future period
   * Methods: simple_average, moving_average, seasonal
   */
  get_payment_forecast_api_v1_analytics_payment_forecast_get: {
    parameters: {
      query: {
        /** @description Start date in ISO format (YYYY-MM-DD) */
        start_date: string;
        /** @description End date in ISO format (YYYY-MM-DD) */
        end_date: string;
        /** @description Forecast method */
        method?: "simple_average" | "moving_average" | "seasonal";
        /** @description Days to look back for historical data */
        lookback_days?: number;
        /** @description Filter by category */
        category_id?: number | null;
        /** @description Filter by organization */
        organization_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentForecast"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Payment Forecast Summary
   * @description Get forecast summary comparing different methods
   */
  get_payment_forecast_summary_api_v1_analytics_payment_forecast_summary_get: {
    parameters: {
      query: {
        /** @description Start date in ISO format (YYYY-MM-DD) */
        start_date: string;
        /** @description End date in ISO format (YYYY-MM-DD) */
        end_date: string;
        /** @description Filter by category */
        category_id?: number | null;
        /** @description Filter by organization */
        organization_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ForecastSummary"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Generate Forecast
   * @description Generate forecast for next month based on:
   * 1. Regular expenses (repeating monthly)
   * 2. Average of non-regular expenses
   */
  generate_forecast_api_v1_forecast_generate_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateForecastRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Forecasts
   * @description Get all forecasts for specified month and department
   */
  get_forecasts_api_v1_forecast__get: {
    parameters: {
      query: {
        year: number;
        month: number;
        department_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ForecastExpenseInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Forecast
   * @description Create new forecast expense
   */
  create_forecast_api_v1_forecast__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForecastExpenseCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ForecastExpenseInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Forecast
   * @description Update forecast expense
   */
  update_forecast_api_v1_forecast__forecast_id__put: {
    parameters: {
      path: {
        forecast_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForecastExpenseUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ForecastExpenseInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Forecast
   * @description Delete forecast expense
   */
  delete_forecast_api_v1_forecast__forecast_id__delete: {
    parameters: {
      path: {
        forecast_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Clear Forecasts
   * @description Clear all forecasts for specified month and department
   */
  clear_forecasts_api_v1_forecast_clear__year___month__delete: {
    parameters: {
      query: {
        department_id: number;
      };
      path: {
        year: number;
        month: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Forecast Calendar
   * @description Export forecast data as Excel calendar format using template
   * Dates in columns, categories/contractors in rows
   */
  export_forecast_calendar_api_v1_forecast_export__year___month__get: {
    parameters: {
      query?: {
        /** @description Filter by department */
        department_id?: number | null;
      };
      path: {
        year: number;
        month: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Expense Attachments
   * @description Get all attachments for an expense
   */
  get_expense_attachments_api_v1_expenses__expense_id__attachments_get: {
    parameters: {
      path: {
        expense_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Attachment
   * @description Upload a file attachment for an expense
   */
  upload_attachment_api_v1_expenses__expense_id__attachments_post: {
    parameters: {
      path: {
        expense_id: number;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_attachment_api_v1_expenses__expense_id__attachments_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AttachmentInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Attachment
   * @description Get attachment by ID
   */
  get_attachment_api_v1_expenses_attachments__attachment_id__get: {
    parameters: {
      path: {
        attachment_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Attachment
   * @description Delete an attachment
   */
  delete_attachment_api_v1_expenses_attachments__attachment_id__delete: {
    parameters: {
      path: {
        attachment_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Attachment
   * @description Update attachment metadata (filename or file_type)
   */
  update_attachment_api_v1_expenses_attachments__attachment_id__patch: {
    parameters: {
      path: {
        attachment_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachmentUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Download Attachment
   * @description Download an attachment file
   */
  download_attachment_api_v1_expenses_attachments__attachment_id__download_get: {
    parameters: {
      path: {
        attachment_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Dashboards
   * @description Get all dashboard configurations
   */
  get_dashboards_api_v1_dashboards_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        user_id?: string | null;
        is_public?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardConfigList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Dashboard
   * @description Create a new dashboard configuration
   */
  create_dashboard_api_v1_dashboards_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DashboardConfigCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DashboardConfigInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Dashboard
   * @description Get dashboard configuration by ID
   */
  get_dashboard_api_v1_dashboards__dashboard_id__get: {
    parameters: {
      path: {
        dashboard_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardConfigInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Dashboard
   * @description Delete dashboard configuration
   */
  delete_dashboard_api_v1_dashboards__dashboard_id__delete: {
    parameters: {
      path: {
        dashboard_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Dashboard
   * @description Update dashboard configuration
   */
  update_dashboard_api_v1_dashboards__dashboard_id__patch: {
    parameters: {
      path: {
        dashboard_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DashboardConfigUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardConfigInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Default Dashboard
   * @description Get default dashboard configuration
   */
  get_default_dashboard_api_v1_dashboards_default_get_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardConfigInDB"];
        };
      };
    };
  };
  /**
   * Set Default Dashboard
   * @description Set a dashboard as default
   */
  set_default_dashboard_api_v1_dashboards__dashboard_id__set_default_post: {
    parameters: {
      path: {
        dashboard_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardConfigInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Duplicate Dashboard
   * @description Duplicate an existing dashboard
   */
  duplicate_dashboard_api_v1_dashboards__dashboard_id__duplicate_post: {
    parameters: {
      path: {
        dashboard_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardConfigInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Expenses By Department Report
   * @description Get expenses report grouped by department
   *
   * Returns summary statistics for each department:
   * - Total expenses
   * - Count of expenses
   * - Average expense amount
   * - OPEX vs CAPEX breakdown
   */
  get_expenses_by_department_report_api_v1_reports_expenses_by_department_get: {
    parameters: {
      query?: {
        /** @description Filter by year */
        year?: number | null;
        /** @description Filter by month */
        month?: number | null;
        /** @description Filter by category */
        category_id?: number | null;
        /** @description Filter by status */
        status?: components["schemas"]["ExpenseStatusEnum"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Budget By Department Report
   * @description Get budget vs actual report grouped by department
   *
   * Returns for each department:
   * - Planned budget (OPEX/CAPEX)
   * - Actual expenses (OPEX/CAPEX)
   * - Variance (planned - actual)
   * - Utilization percentage
   */
  get_budget_by_department_report_api_v1_reports_budget_by_department_get: {
    parameters: {
      query: {
        /** @description Year for budget report */
        year: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Expenses By Department
   * @description Export expenses report by department to Excel
   */
  export_expenses_by_department_api_v1_reports_expenses_export_by_department_get: {
    parameters: {
      query?: {
        /** @description Filter by year */
        year?: number | null;
        /** @description Filter by month */
        month?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Employees
   * @description List all employees with filtering options
   *
   * - **ADMIN/MANAGER**: Can see all employees from all departments
   * - **USER**: Can only see employees from their own department
   */
  list_employees_api_v1_employees__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        department_id?: number | null;
        status_filter?: components["schemas"]["EmployeeStatusEnum"] | null;
        search?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Employee
   * @description Create a new employee (ADMIN/MANAGER only)
   */
  create_employee_api_v1_employees__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EmployeeInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Employee
   * @description Get a specific employee by ID with salary history
   */
  get_employee_api_v1_employees__employee_id__get: {
    parameters: {
      path: {
        employee_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeWithSalaryHistory"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Employee
   * @description Update an employee (ADMIN/MANAGER only)
   */
  update_employee_api_v1_employees__employee_id__put: {
    parameters: {
      path: {
        employee_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Employee
   * @description Delete an employee (ADMIN only)
   */
  delete_employee_api_v1_employees__employee_id__delete: {
    parameters: {
      path: {
        employee_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Salary History
   * @description Get salary history for an employee
   */
  get_salary_history_api_v1_employees__employee_id__salary_history_get: {
    parameters: {
      path: {
        employee_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SalaryHistoryInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add Salary History
   * @description Add a salary history record (ADMIN/MANAGER only)
   */
  add_salary_history_api_v1_employees__employee_id__salary_history_post: {
    parameters: {
      path: {
        employee_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SalaryHistoryCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SalaryHistoryInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Employees
   * @description Export employees list to Excel
   */
  export_employees_api_v1_employees_export_get: {
    parameters: {
      query?: {
        department_id?: number | null;
        status?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Payroll Plans
   * @description List all payroll plans with filtering options
   */
  list_payroll_plans_api_v1_payroll_plans_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        department_id?: number | null;
        employee_id?: number | null;
        year?: number | null;
        month?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayrollPlanWithEmployee"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Payroll Plan
   * @description Create a new payroll plan (ADMIN/MANAGER only)
   */
  create_payroll_plan_api_v1_payroll_plans_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PayrollPlanCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PayrollPlanInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Payroll Plan
   * @description Get a specific payroll plan by ID
   */
  get_payroll_plan_api_v1_payroll_plans__plan_id__get: {
    parameters: {
      path: {
        plan_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayrollPlanWithEmployee"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Payroll Plan
   * @description Update a payroll plan (ADMIN/MANAGER only)
   */
  update_payroll_plan_api_v1_payroll_plans__plan_id__put: {
    parameters: {
      path: {
        plan_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PayrollPlanUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayrollPlanInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Payroll Plan
   * @description Delete a payroll plan (ADMIN only)
   */
  delete_payroll_plan_api_v1_payroll_plans__plan_id__delete: {
    parameters: {
      path: {
        plan_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Payroll Actuals
   * @description List all payroll actuals with filtering options
   */
  list_payroll_actuals_api_v1_payroll_actuals_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        department_id?: number | null;
        employee_id?: number | null;
        year?: number | null;
        month?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayrollActualWithEmployee"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Payroll Actual
   * @description Create a new payroll actual (ADMIN/MANAGER only)
   */
  create_payroll_actual_api_v1_payroll_actuals_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PayrollActualCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PayrollActualInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Payroll Actual
   * @description Update a payroll actual (ADMIN/MANAGER only)
   */
  update_payroll_actual_api_v1_payroll_actuals__actual_id__put: {
    parameters: {
      path: {
        actual_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PayrollActualUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayrollActualInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Payroll Actual
   * @description Delete a payroll actual (ADMIN only)
   */
  delete_payroll_actual_api_v1_payroll_actuals__actual_id__delete: {
    parameters: {
      path: {
        actual_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Payroll Summary
   * @description Get payroll summary by month for a given year
   */
  get_payroll_summary_api_v1_payroll_analytics_summary_get: {
    parameters: {
      query: {
        year: number;
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayrollSummary"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Payroll Plans
   * @description Export payroll plans to Excel
   */
  export_payroll_plans_api_v1_payroll_plans_export_get: {
    parameters: {
      query?: {
        year?: number | null;
        month?: number | null;
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Export Payroll Actuals
   * @description Export payroll actuals to Excel
   */
  export_payroll_actuals_api_v1_payroll_actuals_export_get: {
    parameters: {
      query?: {
        year?: number | null;
        month?: number | null;
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Salary Statistics
   * @description Get salary distribution statistics including median and percentiles
   */
  get_salary_statistics_api_v1_payroll_analytics_salary_stats_get: {
    parameters: {
      query?: {
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SalaryStatistics"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Payroll Structure
   * @description Get payroll structure breakdown by month (base salary vs bonus vs other payments)
   */
  get_payroll_structure_api_v1_payroll_analytics_structure_get: {
    parameters: {
      query: {
        year: number;
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayrollStructureMonth"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Payroll Dynamics
   * @description Get payroll dynamics over time including plan vs actual breakdown
   */
  get_payroll_dynamics_api_v1_payroll_analytics_dynamics_get: {
    parameters: {
      query: {
        year: number;
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayrollDynamics"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Payroll Forecast
   * @description Get payroll forecast for future months based on historical data
   *
   * Uses simple moving average with trend adjustment for forecasting
   */
  get_payroll_forecast_api_v1_payroll_analytics_forecast_get: {
    parameters: {
      query?: {
        /** @description Number of months to forecast */
        months_ahead?: number;
        /** @description Number of historical months to use */
        historical_months?: number;
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayrollForecast"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Import Payroll Plans
   * @description Import payroll plans from Excel file
   *
   * Expected columns:
   * - Год (Year)
   * - Месяц (Month)
   * - Сотрудник (Employee full name)
   * - Оклад (Base salary)
   * - Премия (Bonus) - optional
   * - Прочие выплаты (Other payments) - optional
   * - Примечания (Notes) - optional
   *
   * Only ADMIN and MANAGER can import payroll plans
   */
  import_payroll_plans_api_v1_payroll_plans_import_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_import_payroll_plans_api_v1_payroll_plans_import_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Kpi Goals
   * @description List all KPI goals with filtering options
   */
  list_kpi_goals_api_v1_kpi_goals_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        department_id?: number | null;
        year?: number | null;
        status?: components["schemas"]["KPIGoalStatusEnum"] | null;
        category?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["KPIGoalInDB"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Kpi Goal
   * @description Create a new KPI goal
   */
  create_kpi_goal_api_v1_kpi_goals_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["KPIGoalCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["KPIGoalInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Kpi Goal
   * @description Get a specific KPI goal by ID
   */
  get_kpi_goal_api_v1_kpi_goals__goal_id__get: {
    parameters: {
      path: {
        goal_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["KPIGoalInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Kpi Goal
   * @description Update a KPI goal
   */
  update_kpi_goal_api_v1_kpi_goals__goal_id__put: {
    parameters: {
      path: {
        goal_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["KPIGoalUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["KPIGoalInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Kpi Goal
   * @description Delete a KPI goal
   */
  delete_kpi_goal_api_v1_kpi_goals__goal_id__delete: {
    parameters: {
      path: {
        goal_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Employee Kpis
   * @description List all employee KPIs with filtering options
   */
  list_employee_kpis_api_v1_kpi_employee_kpis_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        department_id?: number | null;
        employee_id?: number | null;
        year?: number | null;
        month?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeKPIWithGoals"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Employee Kpi
   * @description Create a new employee KPI record
   */
  create_employee_kpi_api_v1_kpi_employee_kpis_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeKPICreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EmployeeKPIInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Employee Kpi
   * @description Get a specific employee KPI by ID
   */
  get_employee_kpi_api_v1_kpi_employee_kpis__kpi_id__get: {
    parameters: {
      path: {
        kpi_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeKPIWithGoals"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Employee Kpi
   * @description Update an employee KPI record
   */
  update_employee_kpi_api_v1_kpi_employee_kpis__kpi_id__put: {
    parameters: {
      path: {
        kpi_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeKPIUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeKPIInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Employee Kpi
   * @description Delete an employee KPI record
   */
  delete_employee_kpi_api_v1_kpi_employee_kpis__kpi_id__delete: {
    parameters: {
      path: {
        kpi_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Employee Kpi Goals
   * @description List all employee KPI goal assignments
   */
  list_employee_kpi_goals_api_v1_kpi_employee_kpi_goals_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        employee_id?: number | null;
        goal_id?: number | null;
        year?: number | null;
        month?: number | null;
        status?: components["schemas"]["KPIGoalStatusEnum"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeKPIGoalWithDetails"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Employee Kpi Goal
   * @description Assign a KPI goal to an employee
   */
  create_employee_kpi_goal_api_v1_kpi_employee_kpi_goals_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeKPIGoalCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EmployeeKPIGoalInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Employee Kpi Goal
   * @description Update an employee KPI goal assignment
   */
  update_employee_kpi_goal_api_v1_kpi_employee_kpi_goals__assignment_id__put: {
    parameters: {
      path: {
        assignment_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeKPIGoalUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeKPIGoalInDB"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Employee Kpi Goal
   * @description Delete an employee KPI goal assignment
   */
  delete_employee_kpi_goal_api_v1_kpi_employee_kpi_goals__assignment_id__delete: {
    parameters: {
      path: {
        assignment_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Employee Kpi Summary
   * @description Get KPI summary for employees
   */
  get_employee_kpi_summary_api_v1_kpi_analytics_employee_summary_get: {
    parameters: {
      query: {
        year: number;
        month?: number | null;
        department_id?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["KPIEmployeeSummary"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Root
   * @description Root endpoint
   */
  root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Health Check
   * @description Health check endpoint
   */
  health_check_health_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
};
