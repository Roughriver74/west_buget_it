version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: it_budget_db_prod
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-budget_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-budget_pass}
      POSTGRES_DB: ${DB_NAME:-it_budget_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-54329}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-budget_user} -d ${DB_NAME:-it_budget_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - budget_network

  # Redis (optional, for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: it_budget_redis_prod
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - budget_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    image: it-budget-backend:prod
    container_name: it_budget_backend_prod
    restart: always
    environment:
      # Database - using individual vars instead of DATABASE_URL for better compatibility
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-it_budget_db}
      DB_USER: ${DB_USER:-budget_user}
      DB_PASSWORD: ${DB_PASSWORD:-budget_pass}

      # Application
      DEBUG: "False"
      APP_NAME: "IT Budget Manager"
      APP_VERSION: "0.5.0"
      API_PREFIX: /api/v1

      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-'["https://yourdomain.com"]'}

      # Redis (if using)
      REDIS_URL: redis://redis:6379

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}
    ports:
      - "${BACKEND_PORT:-8888}:8000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend/templates:/app/templates
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - budget_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      # Traefik configuration for Coolify
      - "traefik.enable=true"

      # Define service and port
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

      # HTTPS Router configuration
      # Supports both Coolify (SERVICE_FQDN_BACKEND) and standard (BACKEND_DOMAIN) variables
      - "traefik.http.routers.backend.rule=Host(`${SERVICE_FQDN_BACKEND:-${BACKEND_DOMAIN:-api.budget-west.shknv.ru}}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.backend.service=backend"
      # REMOVED: backend-cors middleware - FastAPI handles CORS including OPTIONS preflight
      # Traefik headers middleware doesn't properly create OPTIONS responses, only adds headers
      # - "traefik.http.routers.backend.middlewares=backend-cors"

      # HTTP to HTTPS redirect router
      - "traefik.http.routers.backend-http.rule=Host(`${SERVICE_FQDN_BACKEND:-${BACKEND_DOMAIN:-api.budget-west.shknv.ru}}`)"
      - "traefik.http.routers.backend-http.entrypoints=web"
      - "traefik.http.routers.backend-http.middlewares=redirect-to-https"

      # REMOVED: CORS middleware for preflight requests
      # Traefik headers middleware only adds headers to existing responses.
      # It DOES NOT create responses for OPTIONS requests!
      #
      # FastAPI CORSMiddleware properly handles:
      # - OPTIONS preflight requests (creates 200 responses)
      # - Access-Control-* headers (adds correct headers)
      # - Origin validation (checks against CORS_ORIGINS)
      # - Credentials support (allows cookies/auth)
      #
      # Old config (removed to fix 503 errors):
      # - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,PATCH"
      # - "traefik.http.middlewares.backend-cors.headers.accesscontrolalloworiginlist=https://${SERVICE_FQDN_FRONTEND:-${FRONTEND_DOMAIN:-budget-west.shknv.ru}}"
      # - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowheaders=Content-Type,Authorization,X-Requested-With"
      # - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowcredentials=true"
      # - "traefik.http.middlewares.backend-cors.headers.accesscontrolmaxage=3600"

      # HTTPS redirect middleware
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_API_URL: ${VITE_API_URL:-https://api.budget-west.shknv.ru}
    image: it-budget-frontend:prod
    container_name: it_budget_frontend_prod
    restart: always
    environment:
      # Runtime environment variable for frontend (injected by docker-entrypoint.sh)
      VITE_API_URL: ${VITE_API_URL:-https://api.budget-west.shknv.ru}
    ports:
      - "${FRONTEND_PORT:-3001}:80"
    depends_on:
      - backend
    networks:
      - budget_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    labels:
      # Traefik configuration for Coolify
      - "traefik.enable=true"

      # Define service and port
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

      # HTTPS Router configuration
      # Supports both Coolify (SERVICE_FQDN_FRONTEND) and standard (FRONTEND_DOMAIN) variables
      - "traefik.http.routers.frontend.rule=Host(`${SERVICE_FQDN_FRONTEND:-${FRONTEND_DOMAIN:-budget-west.shknv.ru}}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.service=frontend"

      # HTTP to HTTPS redirect router
      - "traefik.http.routers.frontend-http.rule=Host(`${SERVICE_FQDN_FRONTEND:-${FRONTEND_DOMAIN:-budget-west.shknv.ru}}`)"
      - "traefik.http.routers.frontend-http.entrypoints=web"
      - "traefik.http.routers.frontend-http.middlewares=redirect-to-https"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  budget_network:
    driver: bridge
