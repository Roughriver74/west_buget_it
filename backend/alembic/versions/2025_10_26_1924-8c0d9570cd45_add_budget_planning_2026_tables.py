"""Add budget planning 2026 tables

Revision ID: 8c0d9570cd45
Revises: bc18a99256b3
Create Date: 2025-10-26 19:24:41.201241+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '8c0d9570cd45'
down_revision: Union[str, None] = 'bc18a99256b3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create new enum types using DO blocks with exception handling
    # (ExpenseTypeEnum already exists, so we don't create it)
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE budgetscenariotypeenum AS ENUM ('BASE', 'OPTIMISTIC', 'PESSIMISTIC');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE budgetversionstatusenum AS ENUM ('DRAFT', 'IN_REVIEW', 'REVISION_REQUESTED', 'APPROVED', 'REJECTED', 'ARCHIVED');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE approvalactionenum AS ENUM ('APPROVED', 'REJECTED', 'REVISION_REQUESTED');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE calculationmethodenum AS ENUM ('AVERAGE', 'GROWTH', 'DRIVER_BASED', 'SEASONAL', 'MANUAL');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)

    # Create enum objects with create_type=False to use existing types
    budget_scenario_type_enum = postgresql.ENUM('BASE', 'OPTIMISTIC', 'PESSIMISTIC', name='budgetscenariotypeenum', create_type=False)
    budget_version_status_enum = postgresql.ENUM('DRAFT', 'IN_REVIEW', 'REVISION_REQUESTED', 'APPROVED', 'REJECTED', 'ARCHIVED', name='budgetversionstatusenum', create_type=False)
    approval_action_enum = postgresql.ENUM('APPROVED', 'REJECTED', 'REVISION_REQUESTED', name='approvalactionenum', create_type=False)
    calculation_method_enum = postgresql.ENUM('AVERAGE', 'GROWTH', 'DRIVER_BASED', 'SEASONAL', 'MANUAL', name='calculationmethodenum', create_type=False)

    op.create_table('budget_scenarios',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('scenario_name', sa.String(length=100), nullable=False),
    sa.Column('scenario_type', budget_scenario_type_enum, nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('global_growth_rate', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('inflation_rate', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('fx_rate', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('assumptions', sa.JSON(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_budget_scenario_year_type', 'budget_scenarios', ['year', 'scenario_type'], unique=False)
    op.create_index(op.f('ix_budget_scenarios_department_id'), 'budget_scenarios', ['department_id'], unique=False)
    op.create_index(op.f('ix_budget_scenarios_id'), 'budget_scenarios', ['id'], unique=False)
    op.create_index(op.f('ix_budget_scenarios_scenario_type'), 'budget_scenarios', ['scenario_type'], unique=False)
    op.create_index(op.f('ix_budget_scenarios_year'), 'budget_scenarios', ['year'], unique=False)
    op.create_table('budget_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_name', sa.String(length=100), nullable=True),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('status', budget_version_status_enum, nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('approved_by', sa.String(length=100), nullable=True),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('change_log', sa.Text(), nullable=True),
    sa.Column('total_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_capex', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_opex', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.ForeignKeyConstraint(['scenario_id'], ['budget_scenarios.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_budget_version_dept_year', 'budget_versions', ['department_id', 'year'], unique=False)
    op.create_index('idx_budget_version_year_status', 'budget_versions', ['year', 'status'], unique=False)
    op.create_index(op.f('ix_budget_versions_department_id'), 'budget_versions', ['department_id'], unique=False)
    op.create_index(op.f('ix_budget_versions_id'), 'budget_versions', ['id'], unique=False)
    op.create_index(op.f('ix_budget_versions_scenario_id'), 'budget_versions', ['scenario_id'], unique=False)
    op.create_index(op.f('ix_budget_versions_status'), 'budget_versions', ['status'], unique=False)
    op.create_index(op.f('ix_budget_versions_year'), 'budget_versions', ['year'], unique=False)
    op.create_table('budget_approval_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('iteration_number', sa.Integer(), nullable=False),
    sa.Column('reviewer_name', sa.String(length=100), nullable=False),
    sa.Column('reviewer_role', sa.String(length=50), nullable=False),
    sa.Column('action', approval_action_enum, nullable=False),
    sa.Column('decision_date', sa.DateTime(), nullable=False),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('requested_changes', sa.JSON(), nullable=True),
    sa.Column('next_action', sa.String(length=100), nullable=True),
    sa.Column('deadline', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['version_id'], ['budget_versions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_approval_log_version_iteration', 'budget_approval_log', ['version_id', 'iteration_number'], unique=False)
    op.create_index(op.f('ix_budget_approval_log_decision_date'), 'budget_approval_log', ['decision_date'], unique=False)
    op.create_index(op.f('ix_budget_approval_log_id'), 'budget_approval_log', ['id'], unique=False)
    op.create_index(op.f('ix_budget_approval_log_version_id'), 'budget_approval_log', ['version_id'], unique=False)
    # Create ExpenseTypeEnum object (if not already created elsewhere)
    expense_type_enum = postgresql.ENUM('OPEX', 'CAPEX', name='expensetypeenum', create_type=False)

    op.create_table('budget_plan_details',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('subcategory', sa.String(length=100), nullable=True),
    sa.Column('planned_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('type', expense_type_enum, nullable=False),
    sa.Column('calculation_method', calculation_method_enum, nullable=True),
    sa.Column('calculation_params', sa.JSON(), nullable=True),
    sa.Column('business_driver', sa.String(length=100), nullable=True),
    sa.Column('justification', sa.Text(), nullable=True),
    sa.Column('based_on_year', sa.Integer(), nullable=True),
    sa.Column('based_on_avg', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('based_on_total', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('growth_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['budget_categories.id'], ),
    sa.ForeignKeyConstraint(['version_id'], ['budget_versions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_budget_detail_version_month_category', 'budget_plan_details', ['version_id', 'month', 'category_id'], unique=False)
    op.create_index(op.f('ix_budget_plan_details_calculation_method'), 'budget_plan_details', ['calculation_method'], unique=False)
    op.create_index(op.f('ix_budget_plan_details_category_id'), 'budget_plan_details', ['category_id'], unique=False)
    op.create_index(op.f('ix_budget_plan_details_id'), 'budget_plan_details', ['id'], unique=False)
    op.create_index(op.f('ix_budget_plan_details_month'), 'budget_plan_details', ['month'], unique=False)
    op.create_index(op.f('ix_budget_plan_details_version_id'), 'budget_plan_details', ['version_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_budget_plan_details_version_id'), table_name='budget_plan_details')
    op.drop_index(op.f('ix_budget_plan_details_month'), table_name='budget_plan_details')
    op.drop_index(op.f('ix_budget_plan_details_id'), table_name='budget_plan_details')
    op.drop_index(op.f('ix_budget_plan_details_category_id'), table_name='budget_plan_details')
    op.drop_index(op.f('ix_budget_plan_details_calculation_method'), table_name='budget_plan_details')
    op.drop_index('idx_budget_detail_version_month_category', table_name='budget_plan_details')
    op.drop_table('budget_plan_details')
    op.drop_index(op.f('ix_budget_approval_log_version_id'), table_name='budget_approval_log')
    op.drop_index(op.f('ix_budget_approval_log_id'), table_name='budget_approval_log')
    op.drop_index(op.f('ix_budget_approval_log_decision_date'), table_name='budget_approval_log')
    op.drop_index('idx_approval_log_version_iteration', table_name='budget_approval_log')
    op.drop_table('budget_approval_log')
    op.drop_index(op.f('ix_budget_versions_year'), table_name='budget_versions')
    op.drop_index(op.f('ix_budget_versions_status'), table_name='budget_versions')
    op.drop_index(op.f('ix_budget_versions_scenario_id'), table_name='budget_versions')
    op.drop_index(op.f('ix_budget_versions_id'), table_name='budget_versions')
    op.drop_index(op.f('ix_budget_versions_department_id'), table_name='budget_versions')
    op.drop_index('idx_budget_version_year_status', table_name='budget_versions')
    op.drop_index('idx_budget_version_dept_year', table_name='budget_versions')
    op.drop_table('budget_versions')
    op.drop_index(op.f('ix_budget_scenarios_year'), table_name='budget_scenarios')
    op.drop_index(op.f('ix_budget_scenarios_scenario_type'), table_name='budget_scenarios')
    op.drop_index(op.f('ix_budget_scenarios_id'), table_name='budget_scenarios')
    op.drop_index(op.f('ix_budget_scenarios_department_id'), table_name='budget_scenarios')
    op.drop_index('idx_budget_scenario_year_type', table_name='budget_scenarios')
    op.drop_table('budget_scenarios')

    # Drop new enum types (don't drop ExpenseTypeEnum as it's used elsewhere)
    op.execute("DROP TYPE IF EXISTS calculationmethodenum")
    op.execute("DROP TYPE IF EXISTS approvalactionenum")
    op.execute("DROP TYPE IF EXISTS budgetversionstatusenum")
    op.execute("DROP TYPE IF EXISTS budgetscenariotypeenum")
    # ### end Alembic commands ###
