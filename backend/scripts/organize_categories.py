#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é (–≥—Ä—É–ø–ø—ã)
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy.orm import Session
from app.db.session import SessionLocal
from app.db.models import BudgetCategory, ExpenseTypeEnum

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_GROUPS = {
    "–õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ –ü–û": {
        "type": ExpenseTypeEnum.OPEX,
        "description": "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏",
        "subcategories": [
            "1—Å(–ª–∏—Ü–µ–Ω–∑–∏–∏)",
            "–ë–∏—Ç—Ä–∏–∫—Å24(–ª–∏—Ü–µ–Ω–∑–∏–∏)",
            "–ü–æ–∫—É–ø–∫–∞ –ü–û",
        ]
    },
    "–°–≤—è–∑—å –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏": {
        "type": ExpenseTypeEnum.OPEX,
        "description": "–¢–µ–ª–µ—Ñ–æ–Ω–∏—è, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
        "subcategories": [
            "–ò–Ω—Ç–µ–≥–∞—Ä—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏ –ø—Ä",
            "–ü–æ—á—Ç–æ–≤—ã–π –°–µ—Ä–≤–µ—Ä",
            "–°–≤—è–∑—å (—Ç–µ–ª–µ—Ñ–æ–Ω/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç)",
        ]
    },
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞": {
        "type": ExpenseTypeEnum.OPEX,
        "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º",
        "subcategories": [
            "–ë–∏—Ç—Ä–∏–∫—Å 24(–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)",
            "–ë–∏—Ç—Ä–∏–∫—Å 24 –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "1—Å",
            "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–æ–≤(—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)",
            "–ê—É—Ç—Å–æ—Ä—Å",
        ]
    },
    "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —Ä–µ–º–æ–Ω—Ç": {
        "type": ExpenseTypeEnum.OPEX,
        "description": "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, —Ä–µ–º–æ–Ω—Ç, —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "subcategories": [
            "–†–µ–º–æ–Ω—Ç—ã –∏ —Ç–µ—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∏",
            "–ó–∞–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π",
            "–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        ]
    },
    "–°–µ—Ä–≤–µ—Ä—ã –∏ —Ö–æ—Å—Ç–∏–Ω–≥": {
        "type": ExpenseTypeEnum.CAPEX,
        "description": "–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Ö–æ—Å—Ç–∏–Ω–≥",
        "subcategories": [
            "–°–µ—Ä–≤–µ—Ä 1—Å",
            "–•–æ—Å—Ç–∏–Ω–≥ CRM",
            "–ù–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤",
        ]
    },
    "–¢–µ—Ö–Ω–∏–∫–∞ –æ—Ñ–∏—Å–æ–≤": {
        "type": ExpenseTypeEnum.CAPEX,
        "description": "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –æ—Ñ–∏—Å–∞–º",
        "subcategories": [
            "–†–µ–Ω–æ–≤–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏–∫–∏",
            "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –ø—Ä–æ—á–µ–π –æ—Ä–≥ —Ç–µ—Ö–Ω–∏–∫–∏(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)",
            "–¢–µ—Ö–Ω–∏–∫–∞ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
            "–¢–µ—Ö–Ω–∏–∫–∞ –õ–æ–≥–∏—Å—Ç–∏–∫–∞",
            "–¢–µ—Ö–Ω–∏–∫–∞ –°–∫–ª–∞–¥",
            "–¢–µ—Ö–Ω–∏–∫–∞ –í–≠–î",
            "–¢–µ—Ö–Ω–∏–∫–∞ –Æ—Ä. –æ—Ç–¥–µ–ª",
            "–¢–µ—Ö–Ω–∏–∫–∞ –ú–æ—Å–∫–≤–∞",
            "–¢–µ—Ö–Ω–∏–∫–∞ –°–µ—Ä–≤–∏—Å",
            "–¢–µ—Ö–Ω–∏–∫–∞ –û–ü –°–ü–±",
            "–¢–µ—Ö–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞",
            "–¢–µ—Ö–Ω–∏–∫–∞",
        ]
    },
    "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã": {
        "type": ExpenseTypeEnum.OPEX,
        "description": "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ —Ä–∏—Å–∫–∏",
        "subcategories": [
            "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ —Ä–∏—Å–∫–∏",
            "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ —Ä–∏—Å–∫–∏¬∂",
        ]
    },
}


def organize_categories(db: Session):
    """–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é"""

    print(f"\n{'='*80}")
    print("–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –í –ò–ï–†–ê–†–•–ò–Æ")
    print(f"{'='*80}\n")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    existing_categories = {}
    for cat in db.query(BudgetCategory).all():
        existing_categories[cat.name] = cat

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(existing_categories)}")

    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    groups_created = 0
    relationships_created = 0

    for group_name, group_info in CATEGORY_GROUPS.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞
        if group_name in existing_categories:
            parent = existing_categories[group_name]
            print(f"  ‚úì –ì—Ä—É–ø–ø–∞ '{group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            # –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–≥—Ä—É–ø–ø—É)
            parent = BudgetCategory(
                name=group_name,
                type=group_info["type"],
                description=group_info["description"],
                is_active=True,
                parent_id=None
            )
            db.add(parent)
            db.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
            groups_created += 1
            print(f"  + –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name} ({group_info['type'].value})")

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for subcat_name in group_info["subcategories"]:
            if subcat_name in existing_categories:
                subcat = existing_categories[subcat_name]
                if subcat.parent_id != parent.id:
                    subcat.parent_id = parent.id
                    relationships_created += 1
                    print(f"    ‚îî‚îÄ {subcat_name}")
            else:
                print(f"    ‚ö†Ô∏è  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    db.commit()

    print(f"\n{'='*80}")
    print("‚úÖ –ò–ï–†–ê–†–•–ò–Ø –°–û–ó–î–ê–ù–ê")
    print(f"{'='*80}\n")

    print(f"–°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {groups_created}")
    print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: {relationships_created}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é
    print(f"\n{'='*80}")
    print("–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–ê–¢–ï–ì–û–†–ò–ô")
    print(f"{'='*80}\n")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–Ω–æ–≤–æ
    root_categories = db.query(BudgetCategory).filter(
        BudgetCategory.parent_id == None
    ).order_by(BudgetCategory.name).all()

    total_categories = 0
    for parent in root_categories:
        cat_type = "CAPEX" if parent.type == ExpenseTypeEnum.CAPEX else "OPEX"
        print(f"\n{parent.name} ({cat_type})")
        print(f"  {parent.description}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories = db.query(BudgetCategory).filter(
            BudgetCategory.parent_id == parent.id
        ).order_by(BudgetCategory.name).all()

        if subcategories:
            print(f"  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(subcategories)}")
            for subcat in subcategories:
                total_categories += 1
                print(f"    ‚îî‚îÄ {subcat.name}")
        else:
            total_categories += 1
            print(f"    (–Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)")

    print(f"\n{'='*80}")
    print(f"–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_categories}")
    print(f"–ì—Ä—É–ø–ø –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {len(root_categories)}")
    print(f"{'='*80}\n")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    db = SessionLocal()

    try:
        organize_categories(db)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        sys.exit(1)
    finally:
        db.close()


if __name__ == "__main__":
    main()
