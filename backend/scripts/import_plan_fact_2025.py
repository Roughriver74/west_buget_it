#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ü–ª–∞–Ω/–§–∞–∫—Ç 2025 –∏–∑ Excel –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent.parent))

import pandas as pd
from datetime import datetime
from sqlalchemy.orm import Session
from sqlalchemy import text
from app.db.session import SessionLocal
from app.db.models import BudgetCategory, BudgetPlan, Expense, ExpenseStatusEnum, Organization, BudgetStatusEnum
from decimal import Decimal


# –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ Excel –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–î
CATEGORY_MAPPING = {
    '–ü–æ–∫—É–ø–∫–∞ –ü–û': '–ü–æ–∫—É–ø–∫–∞ –ü–û',
    '–ê—É—Ç—Å–æ—Ä—Å': '–ê—É—Ç—Å–æ—Ä—Å',
    '–¢–µ—Ö–Ω–∏–∫–∞': '–¢–µ—Ö–Ω–∏–∫–∞',
    '–õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ –ü–û': '–õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ –ü–û',
    '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç',
    '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ': '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
    '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
}

MONTHS = {
    '—è–Ω–≤–∞—Ä—å': 1,
    '—Ñ–µ–≤—Ä–∞–ª—å': 2,
    '–º–∞—Ä—Ç': 3,
    '–∞–ø—Ä–µ–ª—å': 4,
    '–º–∞–π': 5,
    '–ú–∞–π': 5,  # –ù–∞ –ª–∏—Å—Ç–µ "—Ñ–∞–∫—Ç" –º–∞–π —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    '–∏—é–Ω—å': 6,
    '–∏—é–ª—å': 7,
    '–∞–≤–≥—É—Å—Ç': 8,
    '—Å–µ–Ω—Ç—è–±—Ä—å': 9,
    '–æ–∫—Ç—è–±—Ä—å': 10,
    '–Ω–æ—è–±—Ä—å': 11,
    '–¥–µ–∫–∞–±—Ä—å': 12,
}


def get_or_create_organization(db: Session) -> Organization:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    org = db.query(Organization).filter(Organization.name == '–í–ï–°–¢ –û–û–û').first()
    if not org:
        org = Organization(name='–í–ï–°–¢ –û–û–û', legal_name='–í–ï–°–¢ –û–û–û', is_active=True)
        db.add(org)
        db.commit()
        db.refresh(org)
    return org


def get_category_by_name(db: Session, name: str) -> BudgetCategory | None:
    """–ù–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏"""
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    category = db.query(BudgetCategory).filter(
        BudgetCategory.name == name,
        BudgetCategory.is_active == True
    ).first()

    if not category:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        category = db.query(BudgetCategory).filter(
            BudgetCategory.name.ilike(f'%{name}%'),
            BudgetCategory.is_active == True
        ).first()

    return category


def import_plan_data(db: Session, file_path: str):
    """–ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    df = pd.read_excel(file_path, sheet_name='–ü–ª–∞–Ω')

    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—Ç–µ, –≥–¥–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä)
    main_categories = df[df['Unnamed: 0'].notna()]

    imported_count = 0
    skipped_count = 0

    for _, row in main_categories.iterrows():
        category_name = str(row['–°–¢–ê–¢–¨–Ø']).strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if pd.isna(category_name) or category_name == 'nan':
            continue

        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î
        db_category = get_category_by_name(db, category_name)

        if not db_category:
            print(f"  ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            skipped_count += 1
            continue

        print(f"  ‚úì –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {category_name} (ID: {db_category.id})")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
        for month_name, month_num in MONTHS.items():
            if month_name not in df.columns:
                continue

            amount = row[month_name]

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if pd.isna(amount) or amount == 0:
                continue

            # –í—ã—á–∏—Å–ª—è–µ–º CAPEX –∏ OPEX
            capex = float(amount) if db_category.type.value == 'CAPEX' else 0
            opex = float(amount) if db_category.type.value == 'OPEX' else 0

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw SQL —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É —Å enum
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            check_sql = text("""
                SELECT id FROM budget_plans
                WHERE year = :year AND month = :month AND category_id = :category_id
            """)
            existing = db.execute(check_sql, {
                'year': 2025,
                'month': month_num,
                'category_id': db_category.id
            }).fetchone()

            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                update_sql = text("""
                    UPDATE budget_plans
                    SET planned_amount = :amount,
                        capex_planned = :capex,
                        opex_planned = :opex,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = :id
                """)
                db.execute(update_sql, {
                    'amount': float(amount),
                    'capex': capex,
                    'opex': opex,
                    'id': existing[0]
                })
                print(f"    üìù –û–±–Ω–æ–≤–ª—ë–Ω {month_name}: {amount:,.0f} —Ä—É–±.")
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                insert_sql = text("""
                    INSERT INTO budget_plans
                    (year, month, category_id, planned_amount, capex_planned, opex_planned, status, created_at, updated_at)
                    VALUES
                    (:year, :month, :category_id, :amount, :capex, :opex, '–ß–µ—Ä–Ω–æ–≤–∏–∫'::budgetstatusenum, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                """)
                db.execute(insert_sql, {
                    'year': 2025,
                    'month': month_num,
                    'category_id': db_category.id,
                    'amount': float(amount),
                    'capex': capex,
                    'opex': opex
                })
                print(f"    ‚ûï –°–æ–∑–¥–∞–Ω {month_name}: {amount:,.0f} —Ä—É–±.")

            imported_count += 1

    db.commit()
    print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count} –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–∞")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n")


def import_fact_data(db: Session, file_path: str):
    """–ò–º–ø–æ—Ä—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ –º–µ—Å—è—Ü–∞–º)"""
    print("üìä –ò–º–ø–æ—Ä—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("‚ÑπÔ∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n")

    df = pd.read_excel(file_path, sheet_name='—Ñ–∞–∫—Ç')

    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    main_categories = df[df['Unnamed: 0'].notna()]

    org = get_or_create_organization(db)
    imported_count = 0
    skipped_count = 0

    for _, row in main_categories.iterrows():
        category_name = str(row['–°–¢–ê–¢–¨–Ø']).strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if pd.isna(category_name) or category_name == 'nan':
            continue

        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î
        db_category = get_category_by_name(db, category_name)

        if not db_category:
            print(f"  ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            skipped_count += 1
            continue

        print(f"  ‚úì –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {category_name} (ID: {db_category.id})")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –∑–∞ –≥–æ–¥
        total_amount = row.get('–ò–¢–û–ì–û ')

        if pd.notna(total_amount) and total_amount > 0:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
            print(f"    ‚ÑπÔ∏è  –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞ –≥–æ–¥: {total_amount:,.2f} —Ä—É–±.")
            print(f"    üí° –î–µ—Ç–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º")
            imported_count += 1

    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {imported_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    print(f"\nüí° –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç import_expenses.py\n")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    file_path = '/Users/evgenijsikunov/projects/west/west_buget_it/–ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx'

    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        sys.exit(1)

    print("=" * 70)
    print("üì• –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –ü–õ–ê–ù/–§–ê–ö–¢ 2025")
    print("=" * 70)
    print(f"–§–∞–π–ª: {file_path}\n")

    db = SessionLocal()

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import_plan_data(db, file_path)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        import_fact_data(db, file_path)

        print("=" * 70)
        print("‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 70)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        sys.exit(1)

    finally:
        db.close()


if __name__ == '__main__':
    main()
