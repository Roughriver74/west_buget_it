#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞ –∏ —Ñ–∞–∫—Ç–∞ –Ω–∞ 2025 –≥–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx
–õ–∏—Å—Ç 1 - –ü–ª–∞–Ω
–õ–∏—Å—Ç 2 - –§–∞–∫—Ç
"""

import sys
import os
from pathlib import Path
from datetime import datetime
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

import pandas as pd
from sqlalchemy.orm import Session

from app.db.session import SessionLocal, engine
from app.db.models import BudgetCategory, BudgetPlan, Expense, Organization, Contractor, ExpenseTypeEnum, ExpenseStatusEnum, BudgetStatusEnum

# –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–µ–≤
MONTH_MAPPING = {
    '—è–Ω–≤–∞—Ä—å': 1, '—Ñ–µ–≤—Ä–∞–ª—å': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª—å': 4,
    '–º–∞–π': 5, '–ú–∞–π': 5, '–∏—é–Ω—å': 6, '–∏—é–ª—å': 7, '–∞–≤–≥—É—Å—Ç': 8,
    '—Å–µ–Ω—Ç—è–±—Ä—å': 9, '–æ–∫—Ç—è–±—Ä—å': 10, '–Ω–æ—è–±—Ä—å': 11, '–¥–µ–∫–∞–±—Ä—å': 12
}


def get_or_create_category(db: Session, name: str) -> BudgetCategory:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±—é–¥–∂–µ—Ç–∞"""
    category = db.query(BudgetCategory).filter(BudgetCategory.name == name).first()

    if not category:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        expense_type = ExpenseTypeEnum.CAPEX if any(word in name.lower() for word in [
            '—Ç–µ—Ö–Ω–∏–∫–∞', '—Å–µ—Ä–≤–µ—Ä', '–ø–æ–∫—É–ø–∫–∞', '—Ä–µ–Ω–æ–≤–∞—Ü–∏—è', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'
        ]) else ExpenseTypeEnum.OPEX

        category = BudgetCategory(
            name=name,
            type=expense_type,
            description=f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx",
            is_active=True
        )
        db.add(category)
        db.flush()
        print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name} ({expense_type})")

    return category


def get_or_create_organization(db: Session) -> Organization:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    org = db.query(Organization).filter(Organization.name == "–í–ï–°–¢ –û–û–û").first()
    if not org:
        org = Organization(
            name="–í–ï–°–¢ –û–û–û",
            legal_name="–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –í–ï–°–¢",
            is_active=True
        )
        db.add(org)
        db.flush()
    return org


def get_or_create_contractor(db: Session, name: str = "–û–±—â–∏–π") -> Contractor:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"""
    contractor = db.query(Contractor).filter(Contractor.name == name).first()
    if not contractor:
        contractor = Contractor(
            name=name,
            is_active=True
        )
        db.add(contractor)
        db.flush()
    return contractor


def import_budget_plan(db: Session, excel_file: str, year: int = 2025):
    """–ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–∞ –±—é–¥–∂–µ—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ Excel"""
    print(f"\n{'='*80}")
    print(f"–ò–ú–ü–û–†–¢ –ü–õ–ê–ù–ê –ë–Æ–î–ñ–ï–¢–ê –ù–ê {year} –ì–û–î")
    print(f"{'='*80}\n")

    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    df = pd.read_excel(excel_file, sheet_name=0)

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏-–∏—Ç–æ–≥–∏
    df = df[~df['–°–¢–ê–¢–¨–Ø'].str.contains('–ò–¢–û–ì–û|–æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã', case=False, na=False)]

    total_records = 0

    for idx, row in df.iterrows():
        category_name = row['–°–¢–ê–¢–¨–Ø']

        if pd.isna(category_name):
            continue

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = get_or_create_category(db, category_name)

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–µ—Å—è—Ü–∞–º
        for month_name, amount in row[1:].items():
            if pd.notna(amount) and amount > 0:
                month_num = MONTH_MAPPING.get(month_name)
                if not month_num:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
                existing = db.query(BudgetPlan).filter(
                    BudgetPlan.year == year,
                    BudgetPlan.month == month_num,
                    BudgetPlan.category_id == category.id
                ).first()

                if existing:
                    existing.planned_amount = Decimal(str(amount))
                    if category.type == ExpenseTypeEnum.CAPEX:
                        existing.capex_planned = Decimal(str(amount))
                        existing.opex_planned = Decimal('0')
                    else:
                        existing.opex_planned = Decimal(str(amount))
                        existing.capex_planned = Decimal('0')
                else:
                    budget_plan = BudgetPlan(
                        year=year,
                        month=month_num,
                        category_id=category.id,
                        planned_amount=Decimal(str(amount)),
                        capex_planned=Decimal(str(amount)) if category.type == ExpenseTypeEnum.CAPEX else Decimal('0'),
                        opex_planned=Decimal(str(amount)) if category.type == ExpenseTypeEnum.OPEX else Decimal('0'),
                        status=BudgetStatusEnum.APPROVED
                    )
                    db.add(budget_plan)

                total_records += 1

    db.commit()
    print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–∞: {total_records}")


def import_actual_expenses(db: Session, excel_file: str, year: int = 2025):
    """–ò–º–ø–æ—Ä—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –ª–∏—Å—Ç–∞ Excel"""
    print(f"\n{'='*80}")
    print(f"–ò–ú–ü–û–†–¢ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–• –†–ê–°–•–û–î–û–í –ù–ê {year} –ì–û–î")
    print(f"{'='*80}\n")

    # –ß–∏—Ç–∞–µ–º –≤—Ç–æ—Ä–æ–π –ª–∏—Å—Ç
    df = pd.read_excel(excel_file, sheet_name=1)

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏-–∏—Ç–æ–≥–∏
    df = df[~df['–°–¢–ê–¢–¨–Ø'].str.contains('–ò–¢–û–ì–û|–æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã|–ú–°–ö|–ö–†–î', case=False, na=False)]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    organization = get_or_create_organization(db)
    contractor = get_or_create_contractor(db, "–ò–º–ø–æ—Ä—Ç –∏–∑ Excel")

    total_records = 0

    for idx, row in df.iterrows():
        category_name = row['–°–¢–ê–¢–¨–Ø']

        if pd.isna(category_name):
            continue

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = get_or_create_category(db, category_name)

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–µ—Å—è—Ü–∞–º
        for month_name, amount in row[1:].items():
            if pd.notna(amount) and amount > 0:
                month_num = MONTH_MAPPING.get(month_name)
                if not month_num:
                    continue

                # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∑–∞—è–≤–∫–∏ (—Å–µ—Ä–µ–¥–∏–Ω–∞ –º–µ—Å—è—Ü–∞)
                request_date = datetime(year, month_num, 15)
                payment_date = datetime(year, month_num, 28)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
                expense_number = f"IMP-{year}-{month_num:02d}-{category.id:03d}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏
                existing = db.query(Expense).filter(
                    Expense.number == expense_number
                ).first()

                if not existing:
                    expense = Expense(
                        number=expense_number,
                        category_id=category.id,
                        contractor_id=contractor.id,
                        organization_id=organization.id,
                        amount=Decimal(str(amount)),
                        request_date=request_date,
                        payment_date=payment_date,
                        status=ExpenseStatusEnum.PAID,
                        is_paid=True,
                        is_closed=True,
                        comment=f"–ò–º–ø–æ—Ä—Ç –∏–∑ –ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx ({month_name} {year})",
                        requester="–°–∏—Å—Ç–µ–º–∞"
                    )
                    db.add(expense)
                    total_records += 1

    db.commit()
    print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Ö–æ–¥—ã: {total_records}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    excel_file = Path(__file__).parent.parent.parent / "–ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx"

    if not excel_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
        sys.exit(1)

    print(f"\nüìÇ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑: {excel_file}")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()

    try:
        # 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω
        import_budget_plan(db, str(excel_file), 2025)

        # 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—Ç
        import_actual_expenses(db, str(excel_file), 2025)

        print(f"\n{'='*80}")
        print("‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"{'='*80}\n")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        sys.exit(1)
    finally:
        db.close()


if __name__ == "__main__":
    main()
