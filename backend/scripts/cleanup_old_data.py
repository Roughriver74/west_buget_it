#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑ –ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy.orm import Session
from app.db.session import SessionLocal
from app.db.models import BudgetPlan, Expense, BudgetCategory

def cleanup_data(db: Session):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"""

    print(f"\n{'='*80}")
    print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ü–ï–†–ï–î –û–ß–ò–°–¢–ö–û–ô")
    print(f"{'='*80}\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    total_expenses = db.query(Expense).count()
    imported_expenses = db.query(Expense).filter(
        Expense.number.like('IMP-2025-%')
    ).count()
    old_expenses = total_expenses - imported_expenses

    total_plans = db.query(BudgetPlan).count()
    plans_2025 = db.query(BudgetPlan).filter(BudgetPlan.year == 2025).count()
    old_plans = total_plans - plans_2025

    total_categories = db.query(BudgetCategory).count()
    imported_categories = db.query(BudgetCategory).filter(
        BudgetCategory.description.like('%–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx%')
    ).count()
    old_categories = total_categories - imported_categories

    print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"  –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_expenses}")
    print(f"    - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (IMP-2025-*): {imported_expenses}")
    print(f"    - –°—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {old_expenses}")
    print(f"\n  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–∞: {total_plans}")
    print(f"    - –ó–∞ 2025 –≥–æ–¥: {plans_2025}")
    print(f"    - –°—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {old_plans}")
    print(f"\n  –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}")
    print(f"    - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {imported_categories}")
    print(f"    - –°—Ç–∞—Ä—ã—Ö: {old_categories}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\n{'='*80}")
    print("–ü–†–ò–ú–ï–†–´ –°–¢–ê–†–´–• –î–ê–ù–ù–´–• (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã):")
    print(f"{'='*80}\n")

    old_expense_examples = db.query(Expense).filter(
        ~Expense.number.like('IMP-2025-%')
    ).limit(5).all()

    if old_expense_examples:
        print("–°—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏:")
        for exp in old_expense_examples:
            print(f"  - {exp.number}: {exp.amount} —Ä—É–±, {exp.requester}, {exp.created_at}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n{'='*80}")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
    print(f"{'='*80}")
    print(f"\n–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:")
    print(f"  - {old_expenses} —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫")
    print(f"  - {old_plans} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–∞")
    print(f"  - {old_categories} —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    print(f"\n–û—Å—Ç–∞–Ω–µ—Ç—Å—è:")
    print(f"  - {imported_expenses} –∑–∞—è–≤–æ–∫ –∏–∑ Excel")
    print(f"  - {plans_2025} –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–∞ –Ω–∞ 2025")
    print(f"  - {imported_categories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Excel")

    response = input(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")

    if response.lower() != 'yes':
        print("\n‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    print(f"\n{'='*80}")
    print("–ù–ê–ß–ê–õ–û –û–ß–ò–°–¢–ö–ò")
    print(f"{'='*80}\n")

    # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏ (–Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ Excel)
    deleted_expenses = db.query(Expense).filter(
        ~Expense.number.like('IMP-2025-%')
    ).delete(synchronize_session=False)
    print(f"‚úì –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫: {deleted_expenses}")

    # 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–∞ (–Ω–µ 2025 –≥–æ–¥)
    deleted_plans = db.query(BudgetPlan).filter(
        BudgetPlan.year != 2025
    ).delete(synchronize_session=False)
    print(f"‚úì –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–∞: {deleted_plans}")

    # 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    # –ù–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å—è—Ö
    imported_cat_ids = [cat.id for cat in db.query(BudgetCategory).filter(
        BudgetCategory.description.like('%–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx%')
    ).all()]

    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    used_categories_in_expenses = {exp.category_id for exp in db.query(Expense).all()}
    used_categories_in_plans = {plan.category_id for plan in db.query(BudgetPlan).all()}
    used_categories = used_categories_in_expenses | used_categories_in_plans

    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_to_delete = db.query(BudgetCategory).filter(
        ~BudgetCategory.id.in_(used_categories)
    ).all()

    deleted_categories = 0
    for cat in categories_to_delete:
        db.delete(cat)
        deleted_categories += 1

    print(f"‚úì –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {deleted_categories}")

    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    db.commit()

    print(f"\n{'='*80}")
    print("‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"{'='*80}\n")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_expenses = db.query(Expense).count()
    final_plans = db.query(BudgetPlan).count()
    final_categories = db.query(BudgetCategory).count()

    print(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"  –ó–∞—è–≤–æ–∫: {final_expenses}")
    print(f"  –ó–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–∞: {final_plans}")
    print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {final_categories}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º
    print(f"\n{'='*80}")
    print("–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ú–ï–°–Ø–¶–ê–ú (2025)")
    print(f"{'='*80}\n")

    from sqlalchemy import func, extract

    monthly_stats = db.query(
        extract('month', Expense.request_date).label('month'),
        func.count(Expense.id).label('count'),
        func.sum(Expense.amount).label('total')
    ).filter(
        extract('year', Expense.request_date) == 2025
    ).group_by('month').order_by('month').all()

    months = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫']

    for stat in monthly_stats:
        month_name = months[int(stat.month) - 1]
        print(f"  {month_name} 2025: {stat.count} –∑–∞—è–≤–æ–∫ –Ω–∞ {stat.total:,.2f} —Ä—É–±")

    print(f"\n‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã, –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    db = SessionLocal()

    try:
        cleanup_data(db)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        sys.exit(1)
    finally:
        db.close()


if __name__ == "__main__":
    main()
