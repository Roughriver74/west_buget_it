"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –§–û–¢ (–§–æ–Ω–¥ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞) –∏–∑ Excel —Ñ–∞–π–ª–∞
"""

import sys
import os
from datetime import datetime, date
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from openpyxl import load_workbook

from app.db.session import SessionLocal
from app.db.models import Employee, Payroll, Organization, EmployeeStatusEnum, PositionLevelEnum


def parse_date(date_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    if isinstance(date_str, date):
        return date_str
    if isinstance(date_str, datetime):
        return date_str.date()
    if isinstance(date_str, str):
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        for fmt in ['%d.%m.%Y', '%Y-%m-%d', '%d/%m/%Y']:
            try:
                return datetime.strptime(date_str, fmt).date()
            except ValueError:
                continue
    return None


def import_employees_from_excel(file_path: str, sheet_name: str = None, db: Session = None):
    """
    –ò–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞

    –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞:
    - –ö–æ–ª–æ–Ω–∫–∞ A: –§–ò–û
    - –ö–æ–ª–æ–Ω–∫–∞ B: –î–æ–ª–∂–Ω–æ—Å—Ç—å
    - –ö–æ–ª–æ–Ω–∫–∞ C: –û–∫–ª–∞–¥ (‚ÇΩ/–º–µ—Å)
    - –ö–æ–ª–æ–Ω–∫–∞ D: –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞
    - –ö–æ–ª–æ–Ω–∫–∞ E: –°—Ç–∞—Ç—É—Å (–†–∞–±–æ—Ç–∞–µ—Ç/–£–≤–æ–ª–µ–Ω)
    - –ö–æ–ª–æ–Ω–∫–∞ F: Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - –ö–æ–ª–æ–Ω–∫–∞ G: –¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - –ö–æ–ª–æ–Ω–∫–∞ H: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """

    close_db = False
    if db is None:
        db = SessionLocal()
        close_db = True

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
        wb = load_workbook(file_path, data_only=True)

        # –í—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç
        if sheet_name:
            ws = wb[sheet_name]
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ª–∏—Å—Ç, –±–µ—Ä–µ–º 3-–π (–∏–Ω–¥–µ–∫—Å 2)
            if len(wb.sheetnames) >= 3:
                ws = wb[wb.sheetnames[2]]
            else:
                ws = wb.active

        print(f"–ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç: {ws.title}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {ws.max_row}")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_org = db.query(Organization).first()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        created_count = 0
        updated_count = 0
        skipped_count = 0

        # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        for row_idx in range(2, ws.max_row + 1):
            row = ws[row_idx]

            # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            full_name = row[0].value  # A: –§–ò–û
            if not full_name or str(full_name).strip() == "":
                skipped_count += 1
                continue

            position = row[1].value if len(row) > 1 and row[1].value else "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"  # B: –î–æ–ª–∂–Ω–æ—Å—Ç—å
            base_salary = row[2].value if len(row) > 2 and row[2].value else 100000  # C: –û–∫–ª–∞–¥
            hire_date_str = row[3].value if len(row) > 3 else None  # D: –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞
            status_str = row[4].value if len(row) > 4 else "–†–∞–±–æ—Ç–∞–µ—Ç"  # E: –°—Ç–∞—Ç—É—Å
            email = row[5].value if len(row) > 5 else None  # F: Email
            phone = row[6].value if len(row) > 6 else None  # G: –¢–µ–ª–µ—Ñ–æ–Ω
            org_name = row[7].value if len(row) > 7 else None  # H: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞
            hire_date = parse_date(hire_date_str)
            if not hire_date:
                hire_date = date.today()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = EmployeeStatusEnum.ACTIVE
            if status_str and isinstance(status_str, str):
                if "—É–≤–æ–ª–µ–Ω" in status_str.lower() or "dismissed" in status_str.lower():
                    status = EmployeeStatusEnum.DISMISSED
                elif "–æ—Ç–ø—É—Å–∫" in status_str.lower() or "vacation" in status_str.lower():
                    status = EmployeeStatusEnum.VACATION

            # –ò—â–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            organization = None
            if org_name:
                organization = db.query(Organization).filter(
                    Organization.name.ilike(f"%{org_name}%")
                ).first()
            if not organization:
                organization = default_org

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
            try:
                salary = Decimal(str(base_salary))
            except:
                salary = Decimal('100000')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            existing = db.query(Employee).filter(Employee.full_name == str(full_name).strip()).first()

            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                existing.position = str(position).strip() if position else existing.position
                existing.base_salary = salary
                existing.hire_date = hire_date
                existing.status = status
                existing.email = str(email).strip() if email else existing.email
                existing.phone = str(phone).strip() if phone else existing.phone
                existing.organization_id = organization.id if organization else existing.organization_id

                updated_count += 1
                print(f"  –û–±–Ω–æ–≤–ª–µ–Ω: {full_name} - {position} - {salary:,.0f} ‚ÇΩ")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                employee = Employee(
                    full_name=str(full_name).strip(),
                    position=str(position).strip() if position else "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                    base_salary=salary,
                    hire_date=hire_date,
                    status=status,
                    email=str(email).strip() if email else None,
                    phone=str(phone).strip() if phone else None,
                    organization_id=organization.id if organization else None,
                    tax_rate=Decimal('30.0')  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞–ª–æ–≥–æ–≤
                )
                db.add(employee)
                created_count += 1
                print(f"  –°–æ–∑–¥–∞–Ω: {full_name} - {position} - {salary:,.0f} ‚ÇΩ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()

        print("\n" + "="*60)
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"  –°–æ–∑–¥–∞–Ω–æ: {created_count}")
        print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        print(f"  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        print("="*60)

        return {
            "created": created_count,
            "updated": updated_count,
            "skipped": skipped_count
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        return None
    finally:
        if close_db:
            db.close()


def generate_payrolls_for_year(year: int, db: Session = None):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞—Ä–ø–ª–∞—Ç –Ω–∞ –≤–µ—Å—å –≥–æ–¥ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    close_db = False
    if db is None:
        db = SessionLocal()
        close_db = True

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = db.query(Employee).filter(
            Employee.status == EmployeeStatusEnum.ACTIVE
        ).all()

        print(f"\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞—Ä–ø–ª–∞—Ç –Ω–∞ {year} –≥–æ–¥ –¥–ª—è {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

        created_count = 0

        for employee in employees:
            for month in range(1, 13):  # –Ø–Ω–≤–∞—Ä—å - –î–µ–∫–∞–±—Ä—å
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
                existing = db.query(Payroll).filter(
                    Payroll.employee_id == employee.id,
                    Payroll.year == year,
                    Payroll.month == month
                ).first()

                if existing:
                    continue

                # –†–∞—Å—á–µ—Ç—ã
                base_salary = employee.base_salary
                bonus = Decimal('0')  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–µ–º–∏–π
                other_payments = Decimal('0')

                gross_salary = base_salary + bonus + other_payments

                # –ù–∞–ª–æ–≥–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–ù–î–§–õ 13%)
                taxes = gross_salary * Decimal('0.13')
                net_salary = gross_salary - taxes

                # –ù–∞–ª–æ–≥–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (–ï–°–ù ~30%)
                employer_taxes = gross_salary * (employee.tax_rate / 100)
                total_cost = gross_salary + employer_taxes

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                payroll = Payroll(
                    employee_id=employee.id,
                    year=year,
                    month=month,
                    base_salary=base_salary,
                    bonus=bonus,
                    other_payments=other_payments,
                    gross_salary=gross_salary,
                    taxes=taxes,
                    net_salary=net_salary,
                    employer_taxes=employer_taxes,
                    total_cost=total_cost,
                    worked_days=None  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∑–∂–µ
                )
                db.add(payroll)
                created_count += 1

        db.commit()

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –∑–∞–ø–∏—Å–µ–π –∑–∞—Ä–ø–ª–∞—Ç")

        return created_count

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç: {e}")
        db.rollback()
        return 0
    finally:
        if close_db:
            db.close()


if __name__ == "__main__":
    print("="*60)
    print("–ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –§–û–¢ –ò–ó EXCEL")
    print("="*60)

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = "../xls/–ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx"

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    result = import_employees_from_excel(file_path, sheet_name=None)  # sheet_name=None –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 3-–π –ª–∏—Å—Ç

    if result and (result['created'] > 0 or result['updated'] > 0):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ 2025 –≥–æ–¥
        print("\n")
        generate_payrolls_for_year(2025)

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
