#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞ –≤ –ë–î –∏ —Å–≤–µ—Ä–∫–∏ —Å Excel
"""

import sys
import os
from pathlib import Path
import pandas as pd
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.db.session import SessionLocal
from app.db.models import BudgetPlan, BudgetCategory
from sqlalchemy import func

def verify_plan():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∞"""

    db = SessionLocal()

    print(f"\n{'='*80}")
    print("–°–í–ï–†–ö–ê –ü–õ–ê–ù–ê –° EXCEL")
    print(f"{'='*80}\n")

    # –ß–∏—Ç–∞–µ–º Excel
    excel_path = Path(__file__).parent.parent.parent / '–ü–ª–∞–Ω—Ñ–∞–∫—Ç2025.xlsx'
    df_plan = pd.read_excel(excel_path, sheet_name=0)

    print(f"üìÑ –ß–∏—Ç–∞–µ–º Excel: {excel_path}")

    # –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–µ–≤
    MONTH_MAPPING = {
        '—è–Ω–≤–∞—Ä—å': 1, '—Ñ–µ–≤—Ä–∞–ª—å': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª—å': 4,
        '–º–∞–π': 5, '–ú–∞–π': 5, '–∏—é–Ω—å': 6, '–∏—é–ª—å': 7, '–∞–≤–≥—É—Å—Ç': 8,
        '—Å–µ–Ω—Ç—è–±—Ä—å': 9, '–æ–∫—Ç—è–±—Ä—å': 10, '–Ω–æ—è–±—Ä—å': 11, '–¥–µ–∫–∞–±—Ä—å': 12
    }

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = {cat.name: cat for cat in db.query(BudgetCategory).all()}

    issues = []
    correct = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ Excel
    for idx, row in df_plan.iterrows():
        category_name = row['–°–¢–ê–¢–¨–Ø']

        if pd.isna(category_name):
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        if category_name in ['–ò–¢–û–ì–û', '–æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É', '–ú–°–ö', '–ö–†–î', '–ò–¢–û–ì–û –±–µ–∑ –ú–°–ö –∏ –ö–†–î']:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –ë–î
        if category_name not in categories:
            issues.append(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –∏–∑ Excel –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ –ë–î")
            continue

        category = categories[category_name]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º
        for col in df_plan.columns[1:]:
            if col not in MONTH_MAPPING:
                continue

            month_num = MONTH_MAPPING[col]
            excel_value = row[col]

            if pd.isna(excel_value) or excel_value == 0:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î
            db_plan = db.query(BudgetPlan).filter(
                BudgetPlan.year == 2025,
                BudgetPlan.month == month_num,
                BudgetPlan.category_id == category.id
            ).first()

            if not db_plan:
                issues.append(
                    f"‚ùå {category_name} / {col}: –≤ Excel {excel_value:,.0f}, –≤ –ë–î –ù–ï–¢ –ó–ê–ü–ò–°–ò"
                )
            elif float(db_plan.planned_amount) != float(excel_value):
                issues.append(
                    f"‚ö†Ô∏è  {category_name} / {col}: –≤ Excel {excel_value:,.0f}, –≤ –ë–î {float(db_plan.planned_amount):,.0f}"
                )
            else:
                correct.append(f"‚úì {category_name} / {col}: {excel_value:,.0f}")

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n{'='*80}")
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    print(f"{'='*80}\n")

    print(f"‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(correct)}")
    print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(issues)}")

    if issues:
        print(f"\n{'='*80}")
        print("–ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        print(f"{'='*80}\n")

        for issue in issues[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            print(f"  {issue}")

        if len(issues) > 20:
            print(f"\n  ... –∏ –µ—â–µ {len(issues) - 20} –ø—Ä–æ–±–ª–µ–º")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    print(f"\n{'='*80}")
    print("–û–ë–©–ò–ï –°–£–ú–ú–´:")
    print(f"{'='*80}\n")

    # –°—É–º–º–∞ –∏–∑ –ë–î
    db_total = db.query(func.sum(BudgetPlan.planned_amount)).filter(
        BudgetPlan.year == 2025
    ).scalar() or 0

    # –°—É–º–º–∞ –∏–∑ Excel
    excel_total = 0
    for idx, row in df_plan.iterrows():
        category_name = row['–°–¢–ê–¢–¨–Ø']
        if pd.isna(category_name) or category_name in ['–ò–¢–û–ì–û', '–æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É', '–ú–°–ö', '–ö–†–î', '–ò–¢–û–ì–û –±–µ–∑ –ú–°–ö –∏ –ö–†–î']:
            continue

        for col in df_plan.columns[1:]:
            if col in MONTH_MAPPING:
                val = row[col]
                if pd.notna(val):
                    excel_total += float(val)

    print(f"–°—É–º–º–∞ –≤ –ë–î:    {db_total:20,.2f} —Ä—É–±")
    print(f"–°—É–º–º–∞ –≤ Excel: {excel_total:20,.2f} —Ä—É–±")
    print(f"–†–∞–∑–Ω–∏—Ü–∞:       {abs(db_total - excel_total):20,.2f} —Ä—É–±")

    db.close()

    return len(issues) == 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        if verify_plan():
            print("\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
